{"version":3,"file":"core.js","sources":["../../../../packages/core/index.ts","../../../../packages/core/public_api.ts","../../../../packages/core/src/core.ts","../../../../packages/core/src/di/injection_token.ts","../../../../packages/core/src/view/view_ref.ts","../../../../packages/core/src/view/refs.ts","../../../../packages/core/src/view/utils.ts","../../../../packages/core/src/view/view_attach.ts","../../../../packages/core/src/view/view.ts","../../../../packages/core/src/view/provider.ts","../../../../packages/core/src/view/types.ts","../../../../packages/core/src/view/view_container_ref.ts","../../../../packages/core/src/view/element_ref.ts","../../../../packages/core/src/render.ts","../../../../packages/core/src/component/reference.ts","../../../../packages/core/src/application/application.ts","../../../../packages/core/src/component/factory.ts","../../../../packages/core/src/component/factory_resolver.ts","../../../../packages/core/src/application/platform.ts","../../../../packages/core/src/di/reflective_injector.ts","../../../../packages/core/src/di/reflective_provider.ts","../../../../packages/core/src/di/reflective_key.ts","../../../../packages/core/src/di/forward_ref.ts","../../../../packages/core/src/di/reflective_errors.ts","../../../../packages/core/src/di/injector.ts","../../../../packages/core/src/application/platform_errors.ts","../../../../packages/core/src/facade/error.ts","../../../../packages/core/src/component/resolver.ts","../../../../packages/core/src/di/metadata.ts","../../../../packages/core/src/reflection/reflection.ts","../../../../packages/core/src/reflection/reflector.ts","../../../../packages/core/src/reflection/reflector_reader.ts","../../../../packages/core/src/reflection/reflection_capabilities.ts","../../../../packages/core/src/type.ts","../../../../packages/core/src/component/metadata.ts","../../../../packages/core/src/utils/decorator.ts","../../../../packages/core/src/facade/lang.ts","../../../../packages/core/src/facade/collection.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {createPlatformFactory,getPlatform,PlatformRef,ApplicationRef,Component,HostListener,ChildListener,ComponentResolver,ComponentFactory,ComponentFactoryResolver,ComponentRef,createComponentFactory,ViewRef,ViewContainerRef,ElementRef,createViewDefinitionFactory,createView,forwardRef,InjectionToken,Injector,Host,Inject,Injectable,Optional,Self,SkipSelf,Provider,ClassProvider,ExistingProvider,FactoryProvider,TypeProvider,ValueProvider,ReflectiveInjector,ReflectiveInjector_,ReflectiveKey,ReflectiveDependency,ResolvedReflectiveFactory,ResolvedReflectiveProvider,ResolvedReflectiveProvider_,resolveReflectiveProviders,mergeResolvedReflectiveProviders,constructDependencies,reflector,ReflectorReader,Reflector,ClassType,Type,Renderer,RendererFactory,RendererType,Visitor,CORE_PROVIDERS,NodeDef,ProviderDef,DepDef,DepFlags,ProviderData,asProviderData,ViewDefinition,ViewDefinitionFactory,NodeData,ViewData,ViewState,ViewContainerData,DisposableFn,RootData,NodeFlags} from './public_api';\n\nexport {resolveForwardRef as ɵb} from './src/di/forward_ref';\nexport {PlatformReflectionCapabilities as ɵa} from './src/reflection/platform_reflection_capabilities';\nexport {ReflectionCapabilities as ɵf} from './src/reflection/reflection_capabilities';\nexport {makeDecorator as ɵc,makeParamDecorator as ɵd,makePropDecorator as ɵe} from './src/utils/decorator';","/**\n * @module\n * @description\n * Entry point for all public APIs of the core package.\n */\nexport {createPlatformFactory,getPlatform,PlatformRef,ApplicationRef,Component,HostListener,ChildListener,ComponentResolver,ComponentFactory,ComponentFactoryResolver,ComponentRef,createComponentFactory,ViewRef,ViewContainerRef,ElementRef,createViewDefinitionFactory,createView,forwardRef,InjectionToken,Injector,Host,Inject,Injectable,Optional,Self,SkipSelf,Provider,ClassProvider,ExistingProvider,FactoryProvider,TypeProvider,ValueProvider,ReflectiveInjector,ReflectiveInjector_,ReflectiveKey,ReflectiveDependency,ResolvedReflectiveFactory,ResolvedReflectiveProvider,ResolvedReflectiveProvider_,resolveReflectiveProviders,mergeResolvedReflectiveProviders,constructDependencies,reflector,ReflectorReader,Reflector,ClassType,Type,Renderer,RendererFactory,RendererType,Visitor,CORE_PROVIDERS,NodeDef,ProviderDef,DepDef,DepFlags,ProviderData,asProviderData,ViewDefinition,ViewDefinitionFactory,NodeData,ViewData,ViewState,ViewContainerData,DisposableFn,RootData,NodeFlags} from './src/core';\n","import { ComponentResolver } from './component/resolver';\nimport { reflector, Reflector } from './reflection/reflection';\nimport { ReflectorReader } from './reflection/reflector_reader';\nimport {\n  Provider, ClassProvider, ExistingProvider,\n  FactoryProvider, TypeProvider, ValueProvider,\n} from './di/provider';\n\n// Platform & Application\nexport { createPlatformFactory, getPlatform, PlatformRef } from './application/platform';\nexport { ApplicationRef } from './application/application';\n\n// Component\nexport { Component, HostListener, ChildListener } from './component/metadata';\nexport { ComponentResolver };\nexport { ComponentFactory } from './component/factory';\nexport { ComponentFactoryResolver } from './component/factory_resolver';\nexport { ComponentRef } from './component/reference';\n\n// View\nexport { createComponentFactory } from './view/refs';\nexport {NodeDef,ProviderDef,DepDef,DepFlags,ProviderData,asProviderData,ViewDefinition,ViewDefinitionFactory,NodeData,ViewData,ViewState,ViewContainerData,DisposableFn,RootData,NodeFlags} from './view/types';\nexport { ViewRef } from './view/view_ref';\nexport { ViewContainerRef } from './view/view_container_ref';\nexport { ElementRef } from './view/element_ref';\nexport { createViewDefinitionFactory, createView } from './view/view';\n\n// Dependency Injection\nexport { forwardRef } from './di/forward_ref';\nexport { InjectionToken } from './di/injection_token';\nexport { Injector } from './di/injector';\nexport { Host, Inject, Injectable, Optional, Self, SkipSelf } from './di/metadata';\nexport {\n  Provider, ClassProvider, ExistingProvider,\n  FactoryProvider, TypeProvider, ValueProvider\n};\nexport { ReflectiveInjector, ReflectiveInjector_ } from './di/reflective_injector';\nexport { ReflectiveKey } from './di/reflective_key';\nexport {\n  ReflectiveDependency, ResolvedReflectiveFactory, ResolvedReflectiveProvider,\n  ResolvedReflectiveProvider_, resolveReflectiveProviders, mergeResolvedReflectiveProviders,\n  constructDependencies\n} from './di/reflective_provider';\nexport { reflector, ReflectorReader, Reflector };\n\n// Others\nexport { ClassType, Type } from './type';\nexport { Renderer, RendererFactory, RendererType, Visitor } from './render';\n\n// Providers\nexport const /** @type {?} */ CORE_PROVIDERS: Provider[] = [\n  { provide: ReflectorReader, useValue: reflector },\n  ComponentResolver\n];\n","\n/**\n * Creates a token that can be used in a DI Provider.\n * \n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n * \n * `InjectionToken` is parametrize on `T` which is the type of object which will be returned by the\n * `Injector`. This provides additional level of type safety.\n * \n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n * \n * ### Example\n * \n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n * \n * \\@stable\n */\nexport class InjectionToken<T> {\n/**\n * @param {?} _desc\n */\nconstructor(protected _desc: string) {}\n/**\n * @return {?}\n */\ntoString(): string { return `InjectionToken ${this._desc}`; }\n}\n\nfunction InjectionToken_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectionToken.prototype._desc;\n}\n\n","import { ApplicationRef } from '../application/application';\n/**\n * @abstract\n */\nexport abstract class ViewRef {\n/**\n * Destroys the view and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @return {?}\n */\ndestroyed() {}\n/**\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {}\n\n}\n\nexport interface InternalViewRef extends ViewRef {\n  detachFromAppRef(): void;\n  attachToAppRef(appRef: ApplicationRef): void;\n}\n","// tslint:disable:class-name\n\nimport { ClassType } from '../type';\nimport { ApplicationRef } from '../application/application';\nimport { Renderer } from '../render';\nimport { Injector } from '../di/injector';\nimport { ComponentRef } from '../component/reference';\nimport { ComponentFactory } from '../component/factory';\nimport { createRootView, destroyView, initView } from './view';\nimport { ViewRef, InternalViewRef } from './view_ref';\nimport { ViewContainerRef } from './view_container_ref';\nimport { attachEmbeddedView, detachEmbeddedView } from './view_attach';\nimport { ElementRef } from './element_ref';\nimport {\n  ViewData, ViewDefinitionFactory, ViewDefinition, ViewState,\n  asProviderData, DepFlags, ViewContainerData\n} from './types';\nimport { resolveViewDefinition } from './utils';\nimport { resolveDep, tokenKey } from './provider';\n\nconst /** @type {?} */ EMPTY_CONTEXT = new Object();\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createInjector(view: ViewData): Injector {\n  return new Injector_(view);\n}\n/**\n * Internal ComponentFactory\n */\nclass ComponentFactory_ extends ComponentFactory<any> {\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} _viewDefFactory\n */\nconstructor(public selector: string,\npublic componentType: ClassType<any>,\nprivate _viewDefFactory: ViewDefinitionFactory) {\n    super();\n  }\n/**\n * @param {?} injector\n * @param {?=} rootSelectorOrNode\n * @return {?}\n */\ncreate(injector: Injector, rootSelectorOrNode?: string | any): ComponentRef<any> {\n    const /** @type {?} */ viewDef = resolveViewDefinition(this._viewDefFactory);\n    const /** @type {?} */ componentNodeIndex = viewDef.componentProvider.index;\n    const /** @type {?} */ view = createRootView(viewDef, injector, rootSelectorOrNode, EMPTY_CONTEXT);\n    const /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;\n    return new ComponentRef_(view, new ViewRef_(view), component);\n  }\n}\n\nfunction ComponentFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nComponentFactory_.prototype.selector;\n/** @type {?} */\nComponentFactory_.prototype.componentType;\n/** @type {?} */\nComponentFactory_.prototype._viewDefFactory;\n}\n\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @return {?}\n */\nexport function createComponentFactory(selector: string, componentType: ClassType<any>,\n  viewDefFactory: ViewDefinitionFactory): ComponentFactory<any> {\n  return new ComponentFactory_(selector, componentType, viewDefFactory);\n}\n/**\n * Internal ComponentRef\n */\nclass ComponentRef_ extends ComponentRef<any> {\n/**\n * @param {?} _view\n * @param {?} _viewRef\n * @param {?} _component\n */\nconstructor(private _view: ViewData,\nprivate _viewRef: ViewRef,\nprivate _component: any) {\n    super();\n  }\n/**\n * @return {?}\n */\nget location(): ElementRef { return new ElementRef(null); }\n/**\n * @return {?}\n */\nget injector(): Injector { return new Injector_(this._view); }\n/**\n * @return {?}\n */\nget instance(): any { return this._component; };\n/**\n * @return {?}\n */\nget hostView(): ViewRef { return this._viewRef; };\n/**\n * @return {?}\n */\nget componentType(): ClassType<any> { return /** @type {?} */(( <any>this._component.constructor)); }\n/**\n * @return {?}\n */\ndestroy(): void { this._viewRef.destroy(); }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function): void { this._viewRef.onDestroy(callback); }\n}\n\nfunction ComponentRef__tsickle_Closure_declarations() {\n/** @type {?} */\nComponentRef_.prototype._view;\n/** @type {?} */\nComponentRef_.prototype._viewRef;\n/** @type {?} */\nComponentRef_.prototype._component;\n}\n\n/**\n * Internal ViewContainerRef\n */\nclass ViewContainerRef_ implements ViewContainerData {\n\n  /* @internal */\n  _embeddedViews: ViewData[] = [];\n/**\n * @param {?} _view\n */\nconstructor(private _view: ViewData) { }\n/**\n * @return {?}\n */\nget anchorElement(): ElementRef { return new ElementRef(this._view.renderElement); }\n/**\n * @return {?}\n */\nget injector(): Injector { return new Injector_(this._view); }\n/**\n * @return {?}\n */\nget parentInjector(): Injector {\n    let /** @type {?} */ view = this._view;\n    let /** @type {?} */ def = view.def;\n    while (!def && view) {\n      view = view.parent;\n      def = view.def;\n    }\n    return view ? new Injector_(view) : this._view.root.injector;\n  }\n/**\n * @return {?}\n */\nclear(): void { }\n/**\n * @param {?} index\n * @return {?}\n */\nget(index: number): ViewRef {\n    const /** @type {?} */ view = this._embeddedViews[index];\n    if (view) {\n      const /** @type {?} */ ref = new ViewRef_(view);\n      ref.attachToViewContainerRef(this);\n      return ref;\n    }\n    return null;\n  }\n/**\n * @return {?}\n */\nget length(): number { return 0; }\n/**\n * @template C\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: any, context?: C, index?: number):\n    any { }\n/**\n * @template C\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} rootSelectorOrNode\n * @return {?}\n */\ncreateComponent<C>(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n    rootSelectorOrNode?: any): ComponentRef<C> {\n    const /** @type {?} */ contextInjector = injector || this.parentInjector;\n    const /** @type {?} */ componentRef = componentFactory.create(contextInjector, rootSelectorOrNode);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n/**\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\ninsert(viewRef: ViewRef, index?: number): ViewRef {\n    // tslint:disable-next-line:variable-name\n    const /** @type {?} */ viewRef_ = /** @type {?} */(( <ViewRef_>viewRef));\n    const /** @type {?} */ viewData = viewRef_._view;\n    attachEmbeddedView(this._view, index, viewData);\n    viewRef_.attachToViewContainerRef(this);\n    return viewRef;\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef): number {\n    return this._embeddedViews.indexOf(( /** @type {?} */((<ViewRef_>viewRef)))._view);\n  }\n/**\n * @param {?=} index\n * @return {?}\n */\nremove(index?: number): void {\n    const /** @type {?} */ view = detachEmbeddedView(this._view, index);\n    if (view) {\n      destroyView(view);\n    }\n  }\n/**\n * @param {?=} index\n * @return {?}\n */\ndetach(index?: number): ViewRef {\n    const /** @type {?} */ view = detachEmbeddedView(this._view, index);\n    return view ? new ViewRef_(view) : null;\n  }\n}\n\nfunction ViewContainerRef__tsickle_Closure_declarations() {\n/** @type {?} */\nViewContainerRef_.prototype._embeddedViews;\n/** @type {?} */\nViewContainerRef_.prototype._view;\n}\n\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createViewContainerData(view: ViewData): ViewContainerData {\n  return new ViewContainerRef_(view);\n}\n/**\n * Internal View Reference\n */\nclass ViewRef_ implements InternalViewRef {\n  _view: ViewData;\nprivate _viewContainerRef: ViewContainerRef;\nprivate _appRef: ApplicationRef;\n/**\n * @param {?} _view\n */\nconstructor(_view: ViewData) {\n    this._view = _view;\n    this._viewContainerRef = null;\n    this._appRef = null;\n  }\n/**\n * @return {?}\n */\nget context() { return this._view.context; }\n/**\n * @return {?}\n */\nget destroyed(): boolean { return (this._view.state & ViewState.Destroyed) !== 0; }\n/**\n * @return {?}\n */\ndetach(): void { this._view.state &= ~ViewState.ChecksEnabled; }\n/**\n * @return {?}\n */\nreattach(): void { this._view.state |= ViewState.ChecksEnabled; }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {\n    if (!this._view.disposables) {\n      this._view.disposables = [];\n    }\n    this._view.disposables.push( /** @type {?} */((<any>callback)));\n  }\n/**\n * @return {?}\n */\ndestroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._viewContainerRef) {\n      this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n    }\n    destroyView(this._view);\n  }\n/**\n * @return {?}\n */\ndetachFromAppRef() {\n    this._appRef = null;\n  }\n/**\n * @param {?} appRef\n * @return {?}\n */\nattachToAppRef(appRef: ApplicationRef) {\n    if (this._viewContainerRef) {\n      throw new Error('This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n/**\n * @param {?} vcRef\n * @return {?}\n */\nattachToViewContainerRef(vcRef: ViewContainerRef) {\n    if (this._appRef) {\n      throw new Error('This view is already attached directly to the ApplicationRef!');\n    }\n    this._viewContainerRef = vcRef;\n  }\n}\n\nfunction ViewRef__tsickle_Closure_declarations() {\n/** @type {?} */\nViewRef_.prototype._view;\n/** @type {?} */\nViewRef_.prototype._viewContainerRef;\n/** @type {?} */\nViewRef_.prototype._appRef;\n}\n\n/**\n * Internal View Injector\n */\nclass Injector_ implements Injector {\n/**\n * @param {?} _view\n */\nconstructor(private _view: ViewData) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    return resolveDep(this._view,\n      {flags: DepFlags.None, token, tokenKey: tokenKey(token)}, notFoundValue);\n  }\n}\n\nfunction Injector__tsickle_Closure_declarations() {\n/** @type {?} */\nInjector_.prototype._view;\n}\n\n","import { Injector } from '../di/injector';\nimport { ViewDefinition, ViewDefinitionFactory, ViewData } from './types';\nimport { createInjector } from './refs';\n\nconst /** @type {?} */ VIEW_DEFINITION_CACHE = new WeakMap<any, ViewDefinition>();\n/**\n * @param {?} factory\n * @return {?}\n */\nexport function resolveViewDefinition(factory: ViewDefinitionFactory): ViewDefinition {\n  let /** @type {?} */ value: ViewDefinition = VIEW_DEFINITION_CACHE.get(factory);\n  if (!value) {\n    value = factory();\n    VIEW_DEFINITION_CACHE.set(factory, value);\n  }\n  return value;\n}\n","import { ViewData } from './types';\n/**\n * @param {?} parentView\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(parentView: ViewData, viewIndex: number, view: ViewData) {\n  let /** @type {?} */ embeddedViews = parentView.viewContainer._embeddedViews;\n  if (viewIndex == null) {\n    viewIndex = embeddedViews.length;\n  }\n  view.viewContainerParent = parentView;\n  addToArray(embeddedViews, viewIndex, view);\n}\n/**\n * @param {?} parent\n * @param {?} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(parent: ViewData, viewIndex: number): ViewData {\n  const /** @type {?} */ embeddedViews = parent.viewContainer._embeddedViews;\n  if (viewIndex == null || viewIndex >= embeddedViews.length) {\n    viewIndex = embeddedViews.length - 1;\n  }\n  if (viewIndex < 0) {\n    return null;\n  }\n  const /** @type {?} */ view = embeddedViews[viewIndex];\n  view.viewContainerParent = undefined;\n  removeFromArray(embeddedViews, viewIndex);\n  return view;\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr: any[], index: number, value: any) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr: any[], index: number) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    arr.pop();\n  } else {\n    arr.splice(index, 1);\n  }\n}\n","import { Renderer, RendererFactory, RendererType } from '../render';\nimport { ComponentRef } from '../component/reference';\nimport { Injector } from '../di/injector';\nimport { Provider } from '../di/provider';\nimport { resolveReflectiveProviders } from '../di/reflective_provider';\nimport { ClassType } from '../type';\nimport { ViewContainerRef } from './view_container_ref';\nimport {\n  ViewData, ViewState, RootData, ViewDefinition, NodeFlags, ProviderData,\n  NodeData\n} from './types';\nimport { tokenKey, createProviderInstance } from './provider';\nimport { createViewContainerData } from './refs';\n/**\n * @param {?} def\n * @param {?} injector\n * @param {?} rootSelectorOrNode\n * @param {?=} context\n * @return {?}\n */\nexport function createRootView(def: ViewDefinition, injector: Injector,\n  rootSelectorOrNode: string | any, context?: any): ViewData {\n  const /** @type {?} */ rendererFactory: RendererFactory = injector.get(RendererFactory);\n  const /** @type {?} */ root = createRootData(injector, rendererFactory, rootSelectorOrNode);\n  const /** @type {?} */ view = createView(root, null, root.element, def);\n  view.renderer.parse(view);\n  return view;\n}\n/**\n * @param {?} root\n * @param {?} parent\n * @param {?} renderElement\n * @param {?} def\n * @return {?}\n */\nexport function createView(root: RootData,\n  parent: ViewData, renderElement: any, def: ViewDefinition): ViewData {\n  const /** @type {?} */ nodes: NodeData[] = new Array(def.nodes.length);\n  const /** @type {?} */ view: ViewData = {\n    def,\n    renderElement,\n    root,\n    renderer: createRenderer(renderElement, def, parent, root),\n    nodes,\n    parent,\n    viewContainerParent: undefined,\n    viewContainer: undefined,\n    context: undefined,\n    component: undefined,\n    state: ViewState.FirstCheck | ViewState.ChecksEnabled,\n    disposables: undefined,\n  };\n  if (def.nodeFlags & NodeFlags.TypeComponent) {\n    view.viewContainer = createViewContainerData(view);\n  }\n  createViewNodes(view);\n  return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nexport function initView(view: ViewData, component: any, context: any) {\n  view.component = component;\n  view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function destroyView(view: ViewData) {\n  if (view.state & ViewState.Destroyed) {\n    return;\n  }\n  // execEmbeddedViewsAction(view, ViewAction.Destroy);\n  // execComponentViewsAction(view, ViewAction.Destroy);\n  // callLifecycleHooksChildrenFirst(view, NodeFlags.OnDestroy);\n  if (view.disposables) {\n    for (let /** @type {?} */ i = 0; i < view.disposables.length; i++) {\n      view.disposables[i]();\n    }\n  }\n  destroyViewNodes(view);\n  view.renderer.destroy();\n  view.state |= ViewState.Destroyed;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view: ViewData) {\n  const /** @type {?} */ def = view.def;\n  const /** @type {?} */ nodes = view.nodes;\n  let /** @type {?} */ nodeData: any;\n  for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n    const /** @type {?} */ nodeDef = def.nodes[i];\n    switch (nodeDef.flags & NodeFlags.Types) {\n      case NodeFlags.TypeProvider: {\n        const /** @type {?} */ instance = createProviderInstance(view, nodeDef);\n        nodeData = /** @type {?} */(( <ProviderData>{ instance }));\n        break;\n      }\n      case NodeFlags.TypeComponent: {\n        const /** @type {?} */ instance = createProviderInstance(view, nodeDef);\n        nodeData = /** @type {?} */(( <ProviderData>{ instance }));\n\n        initView(view, instance, instance);\n        break;\n      }\n    }\n    nodes[i] = nodeData;\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view: ViewData) {\n  view.renderer.destroyNode(view.renderElement);\n}\n/**\n * @param {?} injector\n * @param {?} rendererFactory\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(\n  injector: Injector, rendererFactory: RendererFactory, rootSelectorOrNode: any): RootData {\n  const /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);\n  let /** @type {?} */ element = rootSelectorOrNode;\n  if (typeof rootSelectorOrNode === 'string') {\n    element = renderer.selectRootElement(rootSelectorOrNode);\n  }\n  return {\n    injector,\n    selectorOrNode: rootSelectorOrNode,\n    element,\n    rendererFactory,\n    renderer\n  };\n}\n/**\n * @param {?} publicProviders\n * @param {?} componentProvider\n * @return {?}\n */\nfunction viewDef(publicProviders: Provider[], componentProvider: any): ViewDefinition {\n  var /** @type {?} */ viewDef: any = {};\n  // resolve public providers\n  const /** @type {?} */ publicProv: any = Object.create(null);\n  if (publicProviders) {\n    resolveReflectiveProviders(publicProviders).forEach(p => {\n      const /** @type {?} */ resolvedFactory = p.resolvedFactories[0];\n      publicProv[tokenKey(p.key)] = {\n        factory: resolvedFactory.factory,\n        dependencies: resolvedFactory.dependencies,\n        multi: p.multiProvider\n      };\n    });\n  }\n  viewDef.publicProviders = publicProv;\n\n  // combine to all providers\n  const /** @type {?} */ allProviders = Object.create(publicProv);\n  viewDef.allProviders = allProviders;\n\n  // resolve component provider\n  if (componentProvider) {\n    const /** @type {?} */ resolvedComp = resolveReflectiveProviders([componentProvider])[0];\n    const /** @type {?} */ resolvedCompFactory = resolvedComp.resolvedFactories[0];\n    viewDef.componentProvider = {\n      factory: resolvedCompFactory.factory,\n      dependencies: resolvedCompFactory.dependencies,\n      multi: false,\n    };\n    allProviders[tokenKey(resolvedComp.key)] = viewDef.componentProvider;\n  }\n\n  return viewDef;\n}\n/**\n * @param {?} publicProviders\n * @param {?} componentProvider\n * @return {?}\n */\nexport function createViewDefinitionFactory(publicProviders: Provider[], componentProvider: any) {\n  return () => {\n    return viewDef(publicProviders, componentProvider);\n  };\n}\n/**\n * @param {?} hostElement\n * @param {?} viewDef\n * @param {?} parentView\n * @param {?} root\n * @return {?}\n */\nfunction createRenderer(hostElement: any, viewDef: ViewDefinition,\n      parentView: ViewData, root: RootData) {\n    let /** @type {?} */ rendererType: RendererType = viewDef.componentRendererType;\n    let /** @type {?} */ view = parentView;\n    while (view && !rendererType) {\n      rendererType = view.def.componentRendererType;\n      view = view.parent;\n    }\n\n    if (!rendererType) {\n      return root.renderer;\n    } else {\n      return root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n}\n","import { stringify } from '../facade/lang';\nimport { Renderer } from '../render';\nimport { Injector } from '../di/injector';\nimport { resolveReflectiveProviders, ReflectiveDependency } from '../di/reflective_provider';\nimport { ReflectiveKey } from '../di/reflective_key';\nimport { Provider } from '../di/provider';\nimport { ElementRef } from './element_ref';\nimport { ViewContainerRef } from './view_container_ref';\nimport { createViewContainerData, createInjector } from './refs';\nimport {\n  ViewData, ProviderData, NodeDef, NodeFlags, DepDef, DepFlags,\n  asProviderData\n} from './types';\n\nconst /** @type {?} */ NOT_CREATED = new Object();\n\n// tslint:disable:variable-name\nconst /** @type {?} */ _tokenKeyCache = new Map<any, string>();\nconst /** @type {?} */ RendererTokenKey = tokenKey(Renderer);\nconst /** @type {?} */ ElementRefTokenKey = tokenKey(ElementRef);\nconst /** @type {?} */ ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n// const ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\nconst /** @type {?} */ InjectorRefTokenKey = tokenKey(Injector);\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token: any): string {\n  let /** @type {?} */ key = _tokenKeyCache.get(token);\n  if (!key) {\n    key = stringifyToken(token); // + '_' + _tokenKeyCache.size;\n    _tokenKeyCache.set(token, key);\n  }\n  return key;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction stringifyToken(token: any): string {\n  if (token instanceof ReflectiveDependency) {\n    return token.key.displayName;\n  }\n  if (token instanceof ReflectiveKey) {\n    return token.displayName;\n  }\n  return stringify(token);\n}\n/**\n * @param {?} view\n * @param {?} depDef\n * @param {?} allowPrivateServices\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(view: ViewData, depDef: DepDef, allowPrivateServices: boolean,\n  notFoundValue = Injector.THROW_IF_NOT_FOUND): any {\n\n  if (depDef.flags & DepFlags.Value) {\n    return depDef.token;\n  }\n  const /** @type {?} */ startView = view;\n  if (depDef.flags & DepFlags.Optional) {\n    notFoundValue = null;\n  }\n\n  const /** @type {?} */ tokenKey = depDef.tokenKey;\n\n  if (depDef.flags & DepFlags.SkipSelf) {\n    allowPrivateServices = false;\n    view = view.parent;\n  }\n\n  while (view) {\n    let /** @type {?} */ def = view.def;\n    if (def) {\n      switch (tokenKey) {\n        case RendererTokenKey:\n          return view.renderer;\n        case ElementRefTokenKey:\n          return new ElementRef(view.renderElement);\n        case ViewContainerRefTokenKey:\n          return view.viewContainer || view.viewContainerParent;\n        // case ChangeDetectorRefTokenKey: {\n        //   let cdView = findCompView(view, elDef, allowPrivateServices);\n        //   return createChangeDetectorRef(cdView);\n        // }\n        case InjectorRefTokenKey:\n          return createInjector(view);\n        default:\n          const /** @type {?} */ providerDef =\n            (allowPrivateServices ? def.allProviders : def.publicProviders)[tokenKey];\n          if (providerDef) {\n            const /** @type {?} */ providerData = asProviderData(view, providerDef.index);\n            if (providerData.instance === NOT_CREATED) {\n              providerData.instance = _createProviderInstance(view, providerDef);\n            }\n            return providerData.instance;\n          }\n      }\n    }\n    view = view.parent;\n  }\n  return startView.root.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view: ViewData, def: NodeDef): any {\n  // private services can see other private services\n\n  const /** @type {?} */ allowPrivateServices = (def.flags & NodeFlags.PrivateProvider) > 0;\n  const /** @type {?} */ providerDef = def.provider;\n  let /** @type {?} */ deps: any[] = [];\n  if (providerDef.deps) {\n    deps = providerDef.deps.map(d => resolveDep(view, d, allowPrivateServices));\n  }\n  return providerDef.factory(...deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view: ViewData, def: NodeDef): any {\n  return def.flags & NodeFlags.LazyProvider ? NOT_CREATED : _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callProviderLifecycles(view: ViewData, index: number, lifecycles: NodeFlags) {\n  const /** @type {?} */ provider = asProviderData(view, index).instance;\n  if (provider === NOT_CREATED) {\n    return;\n  }\n  if (lifecycles & NodeFlags.OnDestroy) {\n    provider.ngOnDestroy();\n  }\n}\n","import { ClassType } from '../type';\nimport { Renderer, RendererFactory, RendererType } from '../render';\nimport { Injector } from '../di/injector';\nimport { Provider } from '../di/provider';\nimport { ViewContainerRef } from './view_container_ref';\n\nexport interface NodeDef {\n  flags: NodeFlags;\n  index: number;\n  provider: ProviderDef;\n}\n\nexport interface ProviderDef {\n  token: any;\n  tokenKey: string;\n  factory: (...deps: any[]) => any;\n  deps: DepDef[];\n}\n\nexport interface DepDef {\n  flags: DepFlags;\n  token: any;\n  tokenKey: string;\n}\n\nexport const enum DepFlags {\n  None = 0,\n  SkipSelf = 1 << 0,\n  Optional = 1 << 1,\n  Value = 2 << 2,\n}\n\nexport interface ProviderData { instance: any; }\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asProviderData(view: ViewData, index: number): ProviderData {\n  return /** @type {?} */(( <any>view.nodes[index]));\n}\n\nexport interface ViewDefinition {\n  factory: ViewDefinitionFactory;\n  nodes: NodeDef[];\n  /** aggregated NodeFlags for all nodes **/\n  nodeFlags: NodeFlags;\n  componentRendererType: RendererType;\n  componentProvider: NodeDef;\n  publicProviders: {[tokenKey: string]: NodeDef};\n  allProviders: {[tokenKey: string]: NodeDef};\n}\n\nexport type ViewDefinitionFactory = () => ViewDefinition;\nexport class NodeData {\nprivate __brand: any; }\n\nfunction NodeData_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeData.prototype.__brand;\n}\n\n\nexport interface ViewData {\n  def: ViewDefinition;\n  renderElement: any;\n  root: RootData;\n  renderer: Renderer;\n  nodes: NodeData[];\n  parent: ViewData;\n  viewContainerParent: ViewData;\n  viewContainer: ViewContainerData;\n  component: any;\n  context: any;\n  state: ViewState;\n  disposables: DisposableFn[];\n}\n\nexport const enum ViewState {\n  FirstCheck = 1 << 0,\n  ChecksEnabled = 1 << 1,\n  Errored = 1 << 2,\n  Destroyed = 1 << 3\n}\n\nexport interface ViewContainerData extends ViewContainerRef {\n  _embeddedViews: ViewData[];\n}\n\nexport type DisposableFn = () => void;\n\nexport interface RootData {\n  injector: Injector;\n  selectorOrNode: any;\n  renderer: Renderer;\n  rendererFactory: RendererFactory;\n  element: any;\n}\n\n\nexport const enum NodeFlags {\n  None = 0,\n  // TypeElement = 1 << 0,\n  // TypeText = 1 << 1,\n  // CatRenderNode = TypeElement | TypeText,\n  // TypeNgContent = 1 << 2,\n  // TypePipe = 1 << 3,\n  // TypePureArray = 1 << 4,\n  // TypePureObject = 1 << 5,\n  // TypePurePipe = 1 << 6,\n  // CatPureExpression = TypePureArray | TypePureObject | TypePurePipe,\n  TypeProvider = 1 << 7,\n  LazyProvider = 1 << 11,\n  PrivateProvider = 1 << 12,\n  // TypeDirective = 1 << 13,\n  TypeComponent = 1 << 14,\n  CatProvider = TypeProvider | TypeComponent,\n  // OnInit = 1 << 15,\n  OnDestroy = 1 << 16,\n  // DoCheck = 1 << 17,\n  // OnChanges = 1 << 18,\n  // AfterContentInit = 1 << 19,\n  // AfterContentChecked = 1 << 20,\n  // AfterViewInit = 1 << 21,\n  // AfterViewChecked = 1 << 22,\n  EmbeddedViews = 1 << 23,\n  ComponentView = 1 << 24,\n  // TypeContentQuery = 1 << 25,\n  // TypeViewQuery = 1 << 26,\n  // StaticQuery = 1 << 27,\n  // DynamicQuery = 1 << 28,\n  // CatQuery = TypeContentQuery | TypeViewQuery,\n\n  // mutually exclusive values...\n  // Types = CatRenderNode | TypeNgContent | TypePipe | CatPureExpression | CatProvider | CatQuery\n  Types = CatProvider\n}\n","import { ViewRef } from './view_ref';\nimport { ElementRef } from './element_ref';\nimport { Injector } from '../di/injector';\nimport { ComponentFactory } from '../component/factory';\nimport { ComponentRef } from '../component/reference';\n/**\n * @abstract\n */\nexport abstract class ViewContainerRef {\n/**\n * @abstract\n * @return {?}\n */\nanchorElement() {}\n/**\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * @abstract\n * @return {?}\n */\nparentInjector() {}\n/**\n * Destroys all Views in this container.\n * @abstract\n * @return {?}\n */\nclear() {}\n/**\n * Returns the ViewRef for the View located in this container at the specified index.\n * @abstract\n * @param {?} index\n * @return {?}\n */\nget(index: number) {}\n/**\n * Returns the number of Views currently attached to this container.\n * @abstract\n * @return {?}\n */\nlength() {}\n/**\n * Instantiates an Embedded View based on the TemplateRef `templateRef`} and inserts it\n * into this container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the ViewRef for the newly created View.\n * @abstract\n * @template C\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: any, context?: C, index?: number) {}\n/**\n * Instantiates a single Component and inserts its Host View into this container at the\n * specified `index`.\n * \n * The component is instantiated using its ComponentFactory which can be\n * obtained via ComponentFactoryResolver#resolveComponentFactory}.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * You can optionally specify the Injector that will be used as parent for the Component.\n * \n * Returns the ComponentRef of the Host View created for the newly instantiated Component.\n * @abstract\n * @template C\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @return {?}\n */\ncreateComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][]) {}\n/**\n * Returns the index of the View, specified via ViewRef, within the current container or\n * `-1` if this container doesn't contain the View.\n * @abstract\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef) {}\n/**\n * Destroys a View attached to this container at the specified `index`.\n * \n * If `index` is not specified, the last View in the container will be removed.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\nremove(index?: number) {}\n/**\n * Use along with #nsert} to move a View within the current container.\n * \n * If the `index` param is omitted, the last ViewRef is detached.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\ndetach(index?: number) {}\n}\n","\nexport class ElementRef {\npublic nativeElement: any;\n/**\n * @param {?} nativeElement\n */\nconstructor(nativeElement: any) { this.nativeElement = nativeElement; }\n}\n\nfunction ElementRef_tsickle_Closure_declarations() {\n/** @type {?} */\nElementRef.prototype.nativeElement;\n}\n\n","export interface Visitor {\n  visitElement(element: Element, context: any): any;\n  visitAttribute(element: Element, attr: Attr, context: any): any;\n  visitText(text: Text, context: any): any;\n  visitComment(comment: Comment, context: any): any;\n}\n\nexport interface RendererType {\n  visitor: Visitor;\n  data: {[kind: string]: any};\n}\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class RendererFactory {\n/**\n * @abstract\n * @param {?} hostElement\n * @param {?} type\n * @return {?}\n */\ncreateRenderer(hostElement: any, type: RendererType) {}\n}\n/**\n * @abstract\n */\nexport abstract class Renderer {\n/**\n * @abstract\n * @param {?} context\n * @return {?}\n */\nparse(context: any) {}\n/**\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string) {}\n/**\n * @abstract\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string) {}\n/**\n * @abstract\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\ndestroyNode(node: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any) {}\n/**\n * @abstract\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} hasVendorPrefix\n * @param {?} hasImportant\n * @return {?}\n */\nsetStyle(\n      el: any, style: string, value: any, hasVendorPrefix: boolean, hasImportant: boolean) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} style\n * @param {?} hasVendorPrefix\n * @return {?}\n */\nremoveStyle(el: any, style: string, hasVendorPrefix: boolean) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any) {}\n/**\n * @abstract\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string) {}\n/**\n * @abstract\n * @param {?} target\n * @param {?} eventName\n * @param {?} callback\n * @return {?}\n */\nlisten(\n      target: 'window'|'document'|'body'|any, eventName: string,\n      callback: (event: any) => boolean | void) {}\n}\n","import { ClassType } from '../type';\nimport { Injector } from '../di/injector';\nimport { ElementRef } from '../view/element_ref';\nimport { ViewRef } from '../view/view_ref';\n/**\n * Represents an instance of a Component created via a ComponentFactory.\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the destroy method.\n * \n * @export\n * \\@class ComponentRef\n * @abstract\n */\nexport abstract class ComponentRef<C> {\n/**\n * Location of the component instance\n * @abstract\n * @return {?}\n */\nlocation() {}\n/**\n * The injector on which the component instance exists.\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * The instance of the Component.\n * @abstract\n * @return {?}\n */\ninstance() {}\n/**\n * @abstract\n * @return {?}\n */\nhostView() {}\n/**\n * The component type.\n * @abstract\n * @return {?}\n */\ncomponentType() {}\n/**\n * Destroys the component instance and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * Allows to register a callback that will be called when the component is destroyed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {}\n}\n","import { ListWrapper } from '../facade/collection';\nimport { ComponentFactoryResolver } from '../component/factory_resolver';\nimport { ComponentRef } from '../component/reference';\nimport { ComponentFactory } from '../component/factory';\nimport { ClassType } from '../type';\nimport {\n  NotYetBootstrappedError,\n  AlreadyBootstrappedError\n} from './application_errors';\nimport { Component } from '../component/metadata';\nimport { ViewRef, InternalViewRef } from '../view/view_ref';\nimport { Injectable, Inject } from '../di/metadata';\nimport { Injector, THROW_IF_NOT_FOUND } from '../di/injector';\nimport {reflector} from '../reflection/reflection';\nimport { getPlatform } from './platform';\n/**\n * This is a reference of a Mojiito Application.\n * \n * @export\n * \\@class ApplicationRef\n */\nexport class ApplicationRef {\nprivate _rootComponents: ComponentRef<any>[] = [];\nprivate _rootComponentTypes: ClassType<any>[] = [];\nprivate _views: InternalViewRef[] = [];\n/**\n * @param {?} injector\n * @param {?} _componentFactoryResolver\n */\nconstructor(public injector: Injector,\nprivate _componentFactoryResolver: ComponentFactoryResolver) { }\n/**\n * @template C\n * @param {?} componentOrFactory\n * @return {?}\n */\nbootstrap<C>(componentOrFactory: ClassType<C> | ComponentFactory<C>): ComponentRef<C> {\n    let /** @type {?} */ componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n    }\n    this._rootComponentTypes.push(componentFactory.componentType);\n    const /** @type {?} */ compRef = componentFactory.create(this.injector, componentFactory.selector);\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    this._loadComponent(compRef);\n    return compRef;\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nattachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as InternalViewRef)));\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\ndetachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as InternalViewRef)));\n    ListWrapper.remove(this._views, view);\n    view.detachFromAppRef();\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\nprivate _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    // this.tick();\n    this._rootComponents.push(componentRef);\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\nprivate _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    ListWrapper.remove(this._rootComponents, componentRef);\n  }\n/**\n * @return {?}\n */\nonDestroy() {\n    this._views.slice().forEach((view) => view.destroy());\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: ComponentFactoryResolver, },\n];\n}\n\nfunction ApplicationRef_tsickle_Closure_declarations() {\n/** @type {?} */\nApplicationRef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApplicationRef.ctorParameters;\n/** @type {?} */\nApplicationRef.prototype._rootComponents;\n/** @type {?} */\nApplicationRef.prototype._rootComponentTypes;\n/** @type {?} */\nApplicationRef.prototype._views;\n/** @type {?} */\nApplicationRef.prototype.injector;\n/** @type {?} */\nApplicationRef.prototype._componentFactoryResolver;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ClassType } from '../type';\nimport { ComponentRef } from './reference';\nimport { Injector } from '../di/injector';\n/**\n * @abstract\n */\nexport abstract class ComponentFactory<C> {\n/**\n * @abstract\n * @return {?}\n */\nselector() {}\n/**\n * @abstract\n * @return {?}\n */\ncomponentType() {}\n/**\n * Creates a new component.\n * @abstract\n * @param {?} injector\n * @param {?=} rootSelectorOrNode\n * @return {?}\n */\ncreate(injector: Injector, rootSelectorOrNode?: string|any) {}\n}\n","import { ClassType } from '../type';\nimport { ComponentFactory } from './factory';\nimport { BaseError } from '../facade/error';\nimport { stringify } from '../facade/lang';\nexport class ComponentFactoryResolver {\nprivate _factories = new Map<any, ComponentFactory<any>>();\n/**\n * @param {?} factories\n * @param {?=} _parent\n */\nconstructor(factories: ComponentFactory<any>[],\nprivate _parent?: ComponentFactoryResolver) {\n    for (let i = 0; i < factories.length; i++) {\n      const factory = factories[i];\n      this._factories.set(factory.componentType, factory);\n    }\n  }\n/**\n * @template C\n * @param {?} componentType\n * @return {?}\n */\nresolveComponentFactory<C>(componentType: ClassType<C>): ComponentFactory<C> {\n    let /** @type {?} */ result = this._factories.get(componentType);\n    if (!result) {\n      if (!this._parent) {\n        throw new CouldNotResolveFactoryError(componentType);\n      }\n      result = this._parent.resolveComponentFactory(componentType);\n    }\n    return result;\n  }\n}\n\nfunction ComponentFactoryResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nComponentFactoryResolver.prototype._factories;\n/** @type {?} */\nComponentFactoryResolver.prototype._parent;\n}\n\nexport class CouldNotResolveFactoryError extends BaseError {\n/**\n * @param {?} type\n */\nconstructor(type: ClassType<any>) {\n    super(`Could not resolve factory for \"${stringify(type)}! ` +\n      `Did you provide the component to the bootstrap function?`);\n  }\n}\n","import { PlatformAlreadyExistsError } from './platform_errors';\nimport { Injector } from '../di/injector';\nimport { InjectionToken } from '../di/injection_token';\nimport { Provider } from '../di/provider';\nimport { ReflectiveInjector } from '../di/reflective_injector';\nimport { ClassType } from '../type';\nimport { ComponentFactory } from '../component/factory';\n\nlet /** @type {?} */ _platform: PlatformRef;\n/**\n * @abstract\n */\nexport abstract class PlatformRef {\n/**\n * @abstract\n * @template C\n * @param {?} component\n * @return {?}\n */\nbootstrapComponent<C>(component: ClassType<C>) {}\n/**\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void) {}\n/**\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @return {?}\n */\ndestroyed() {}\n}\n/**\n * @return {?}\n */\nexport function getPlatform(): PlatformRef {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(providers: Provider[] = []):\n  (extraProviders?: Provider[]) => PlatformRef {\n  return (extraProviders: Provider[] = []) => {\n    if (getPlatform()) {\n      throw new PlatformAlreadyExistsError();\n    }\n\n    const /** @type {?} */ injector = ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders));\n    _platform = injector.get(PlatformRef);\n    return _platform;\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// tslint:disable:variable-name class-name\n\n\nimport { Injector, THROW_IF_NOT_FOUND } from './injector';\nimport { Self, SkipSelf } from './metadata';\nimport { Provider } from './provider';\nimport {\n  AbstractProviderError, CyclicDependencyError,\n  InstantiationError, NoProviderError, OutOfBoundsError\n} from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\nimport {\n  ReflectiveDependency, ResolvedReflectiveFactory,\n  ResolvedReflectiveProvider, resolveReflectiveProviders\n} from './reflective_provider';\n\n// Threshold for the dynamic version\nconst /** @type {?} */ UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n * \n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n * \n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n * \n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n * \n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n * \n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class ReflectiveInjector implements Injector {\n/**\n * Turns an array of provider definitions into an array of resolved providers.\n * \n * A resolution is a process of flattening multiple nested arrays and converting individual\n * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n * \n * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n * \n * expect(providers.length).toEqual(2);\n * \n * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n * expect(providers[0].key.displayName).toBe(\"Car\");\n * expect(providers[0].dependencies.length).toEqual(1);\n * expect(providers[0].factory).toBeDefined();\n * \n * expect(providers[1].key.displayName).toBe(\"Engine\");\n * });\n * ```\n * \n * See {\\@link ReflectiveInjector#fromResolvedProviders} for more info.\n * @param {?} providers\n * @return {?}\n */\nstatic resolve(providers: Provider[]): ResolvedReflectiveProvider[] {\n    return resolveReflectiveProviders(providers);\n  }\n/**\n * Resolves an array of providers and creates an injector from those providers.\n * \n * The passed-in providers can be an array of `Type`, {\\@link Provider},\n * or a recursive array of more providers.\n * \n * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * expect(injector.get(Car) instanceof Car).toBe(true);\n * ```\n * \n * This function is slower than the corresponding `fromResolvedProviders`\n * because it needs to resolve the passed-in providers first.\n * See {\\@link Injector#resolve} and {\\@link Injector#fromResolvedProviders}.\n * @param {?} providers\n * @param {?=} parent\n * @return {?}\n */\nstatic resolveAndCreate(providers: Provider[], parent: Injector = null): ReflectiveInjector {\n    const /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n  }\n/**\n * Creates an injector from previously resolved providers.\n * \n * This API is the recommended way to construct injectors in performance-sensitive parts.\n * \n * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var providers = ReflectiveInjector.resolve([Car, Engine]);\n * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n * expect(injector.get(Car) instanceof Car).toBe(true);\n * ```\n * \\@experimental\n * @param {?} providers\n * @param {?=} parent\n * @return {?}\n */\nstatic fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent: Injector = null):\n    ReflectiveInjector {\n    return new ReflectiveInjector_(providers, parent);\n  }\n/**\n * Parent of this injector.\n * \n * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n * -->\n * \n * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n * \n * ```typescript\n * var parent = ReflectiveInjector.resolveAndCreate([]);\n * var child = parent.resolveAndCreateChild([]);\n * expect(child.parent).toBe(parent);\n * ```\n * @abstract\n * @return {?}\n */\nparent() {}\n/**\n * Resolves an array of providers and creates a child injector from those providers.\n * \n * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n * -->\n * \n * The passed-in providers can be an array of `Type`, {\\@link Provider},\n * or a recursive array of more providers.\n * \n * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n * \n * ```typescript\n * class ParentProvider {}\n * class ChildProvider {}\n * \n * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n * var child = parent.resolveAndCreateChild([ChildProvider]);\n * \n * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n * ```\n * \n * This function is slower than the corresponding `createChildFromResolved`\n * because it needs to resolve the passed-in providers first.\n * See {\\@link Injector#resolve} and {\\@link Injector#createChildFromResolved}.\n * @abstract\n * @param {?} providers\n * @return {?}\n */\nresolveAndCreateChild(providers: Provider[]) {}\n/**\n * Creates a child injector from previously resolved providers.\n * \n * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n * -->\n * \n * This API is the recommended way to construct injectors in performance-sensitive parts.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n * \n * ```typescript\n * class ParentProvider {}\n * class ChildProvider {}\n * \n * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n * \n * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n * var child = parent.createChildFromResolved(childProviders);\n * \n * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n * ```\n * @abstract\n * @param {?} providers\n * @return {?}\n */\ncreateChildFromResolved(providers: ResolvedReflectiveProvider[]) {}\n/**\n * Resolves a provider and instantiates an object in the context of the injector.\n * \n * The created object does not get cached by the injector.\n * \n * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n * \n * var car = injector.resolveAndInstantiate(Car);\n * expect(car.engine).toBe(injector.get(Engine));\n * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n * ```\n * @abstract\n * @param {?} provider\n * @return {?}\n */\nresolveAndInstantiate(provider: Provider) {}\n/**\n * Instantiates an object using a resolved provider in the context of the injector.\n * \n * The created object does not get cached by the injector.\n * \n * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n * var carProvider = ReflectiveInjector.resolve([Car])[0];\n * var car = injector.instantiateResolved(carProvider);\n * expect(car.engine).toBe(injector.get(Engine));\n * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n * ```\n * @abstract\n * @param {?} provider\n * @return {?}\n */\ninstantiateResolved(provider: ResolvedReflectiveProvider) {}\n/**\n * @abstract\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any) {}\n}\nexport class ReflectiveInjector_ implements ReflectiveInjector {\n/**\n * \\@internal\n */\n_constructionCounter = 0;\n/**\n * \\@internal\n */\npublic _providers: ResolvedReflectiveProvider[];\n/**\n * \\@internal\n */\npublic _parent: Injector;\n\n  keyIds: number[];\n  objs: any[];\n/**\n * Private\n * @param {?} _providers\n * @param {?=} _parent\n */\nconstructor(_providers: ResolvedReflectiveProvider[], _parent: Injector = null) {\n    this._providers = _providers;\n    this._parent = _parent;\n\n    const len = _providers.length;\n\n    this.keyIds = new Array(len);\n    this.objs = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.keyIds[i] = _providers[i].key.id;\n      this.objs[i] = UNDEFINED;\n    }\n  }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n  }\n/**\n * @return {?}\n */\nget parent(): Injector { return this._parent; }\n/**\n * @param {?} providers\n * @return {?}\n */\nresolveAndCreateChild(providers: Provider[]): ReflectiveInjector {\n    const /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return this.createChildFromResolved(ResolvedReflectiveProviders);\n  }\n/**\n * @param {?} providers\n * @return {?}\n */\ncreateChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector {\n    const /** @type {?} */ inj = new ReflectiveInjector_(providers);\n    inj._parent = this;\n    return inj;\n  }\n/**\n * @param {?} provider\n * @return {?}\n */\nresolveAndInstantiate(provider: Provider): any {\n    return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n  }\n/**\n * @param {?} provider\n * @return {?}\n */\ninstantiateResolved(provider: ResolvedReflectiveProvider): any {\n    return this._instantiateProvider(provider);\n  }\n/**\n * @param {?} index\n * @return {?}\n */\ngetProviderAtIndex(index: number): ResolvedReflectiveProvider {\n    if (index < 0 || index >= this._providers.length) {\n      throw new OutOfBoundsError(index);\n    }\n    return this._providers[index];\n  }\n/**\n * \\@internal\n * @param {?} provider\n * @return {?}\n */\n_new(provider: ResolvedReflectiveProvider): any {\n    if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n      throw new CyclicDependencyError(this, provider.key);\n    }\n    return this._instantiateProvider(provider);\n  }\n/**\n * @return {?}\n */\nprivate _getMaxNumberOfObjects(): number { return this.objs.length; }\n/**\n * @param {?} provider\n * @return {?}\n */\nprivate _instantiateProvider(provider: ResolvedReflectiveProvider): any {\n    if (provider.multiProvider) {\n      const /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n      for (let /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n        res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n      }\n      return res;\n    } else {\n      return this._instantiate(provider, provider.resolvedFactories[0]);\n    }\n  }\n/**\n * @param {?} provider\n * @param {?} ResolvedReflectiveFactory\n * @return {?}\n */\nprivate _instantiate(\n    provider: ResolvedReflectiveProvider,\n    ResolvedReflectiveFactory: ResolvedReflectiveFactory): any {\n    const /** @type {?} */ factory = ResolvedReflectiveFactory.factory;\n\n    let /** @type {?} */ deps: any[];\n    try {\n      deps =\n        ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));\n    } catch ( /** @type {?} */e) {\n      if (e instanceof AbstractProviderError || e instanceof InstantiationError) {\n        e.addKey(this, provider.key);\n      }\n      throw e;\n    }\n\n    let /** @type {?} */ obj: any;\n    try {\n      obj = factory(...deps);\n    } catch ( /** @type {?} */e) {\n      throw new InstantiationError(this, e, e.stack, provider.key);\n    }\n\n    return obj;\n  }\n/**\n * @param {?} dep\n * @return {?}\n */\nprivate _getByReflectiveDependency(dep: ReflectiveDependency): any {\n    return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n  }\n/**\n * @param {?} key\n * @param {?} visibility\n * @param {?} notFoundValue\n * @return {?}\n */\nprivate _getByKey(key: ReflectiveKey, visibility: Self | SkipSelf, notFoundValue: any): any {\n    if (key === INJECTOR_KEY) {\n      return this;\n    }\n\n    if (visibility instanceof Self) {\n      return this._getByKeySelf(key, notFoundValue);\n\n    } else {\n      return this._getByKeyDefault(key, notFoundValue, visibility);\n    }\n  }\n/**\n * @param {?} keyId\n * @return {?}\n */\nprivate _getObjByKeyId(keyId: number): any {\n    for (let /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n      if (this.keyIds[i] === keyId) {\n        if (this.objs[i] === UNDEFINED) {\n          this.objs[i] = this._new(this._providers[i]);\n        }\n\n        return this.objs[i];\n      }\n    }\n\n    return UNDEFINED;\n  }\n/**\n * \\@internal\n * @param {?} key\n * @param {?} notFoundValue\n * @return {?}\n */\n_throwOrNull(key: ReflectiveKey, notFoundValue: any): any {\n    if (notFoundValue !== THROW_IF_NOT_FOUND) {\n      return notFoundValue;\n    } else {\n      throw new NoProviderError(this, key);\n    }\n  }\n/**\n * \\@internal\n * @param {?} key\n * @param {?} notFoundValue\n * @return {?}\n */\n_getByKeySelf(key: ReflectiveKey, notFoundValue: any): any {\n    const /** @type {?} */ obj = this._getObjByKeyId(key.id);\n    return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n  }\n/**\n * \\@internal\n * @param {?} key\n * @param {?} notFoundValue\n * @param {?} visibility\n * @return {?}\n */\n_getByKeyDefault(key: ReflectiveKey, notFoundValue: any, visibility: Self | SkipSelf): any {\n    let /** @type {?} */ inj: Injector;\n\n    if (visibility instanceof SkipSelf) {\n      inj = this._parent;\n    } else {\n      inj = this;\n    }\n\n    while (inj instanceof ReflectiveInjector_) {\n      const /** @type {?} */ inj_ = /** @type {?} */(( <ReflectiveInjector_>inj));\n      const /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n      if (obj !== UNDEFINED) return obj;\n      inj = inj_._parent;\n    }\n    if (inj !== null) {\n      return inj.get(key.token, notFoundValue);\n    } else {\n      return this._throwOrNull(key, notFoundValue);\n    }\n  }\n/**\n * @return {?}\n */\nget displayName(): string {\n    const /** @type {?} */ providers =\n      _mapProviders(this, (b: ResolvedReflectiveProvider) => ' \"' + b.key.displayName + '\" ')\n        .join(', ');\n    return `ReflectiveInjector(providers: [${providers}])`;\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.displayName; }\n}\n\nfunction ReflectiveInjector__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nReflectiveInjector_.prototype._constructionCounter;\n/**\n * \\@internal\n * @type {?}\n */\nReflectiveInjector_.prototype._providers;\n/**\n * \\@internal\n * @type {?}\n */\nReflectiveInjector_.prototype._parent;\n/** @type {?} */\nReflectiveInjector_.prototype.keyIds;\n/** @type {?} */\nReflectiveInjector_.prototype.objs;\n}\n\n\nconst /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector: ReflectiveInjector_, fn: Function): any[] {\n  const /** @type {?} */ res: any[] = new Array(injector._providers.length);\n  for (let /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n    res[i] = fn(injector.getProviderAtIndex(i));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {reflector} from '../reflection/reflection';\nimport { ClassType } from '../type';\nimport { resolveForwardRef } from './forward_ref';\nimport { Inject, Optional, SkipSelf, Self } from './metadata';\nimport {\n  ClassProvider, ExistingProvider, FactoryProvider,\n  Provider, TypeProvider, ValueProvider\n} from './provider';\nimport {\n  InvalidProviderError, MixingMultiProvidersWithRegularProvidersError,\n  NoAnnotationError\n} from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\n\ninterface NormalizedProvider extends TypeProvider, ValueProvider, ClassProvider, ExistingProvider,\n  FactoryProvider { }\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal and should not be used directly.\n */\nexport class ReflectiveDependency {\n/**\n * @param {?} key\n * @param {?} optional\n * @param {?} visibility\n */\nconstructor(\npublic key: ReflectiveKey,\npublic optional: boolean,\npublic visibility: Self|SkipSelf) {}\n/**\n * @param {?} key\n * @return {?}\n */\nstatic fromKey(key: ReflectiveKey): ReflectiveDependency {\n    return new ReflectiveDependency(key, false, null);\n  }\n}\n\nfunction ReflectiveDependency_tsickle_Closure_declarations() {\n/** @type {?} */\nReflectiveDependency.prototype.key;\n/** @type {?} */\nReflectiveDependency.prototype.optional;\n/** @type {?} */\nReflectiveDependency.prototype.visibility;\n}\n\n\nconst /** @type {?} */ _EMPTY_LIST: any[] = [];\n\n/**\n * An internal resolved representation of a {@link Provider} used by the {@link Injector}.\n *\n * It is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * @experimental\n */\nexport interface ResolvedReflectiveProvider {\n  /**\n   * A key, usually a `Type<any>`.\n   */\n  key: ReflectiveKey;\n\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  resolvedFactories: ResolvedReflectiveFactory[];\n\n  /**\n   * Indicates if the provider is a multi-provider or a regular provider.\n   */\n  multiProvider: boolean;\n}\nexport class ResolvedReflectiveProvider_ implements ResolvedReflectiveProvider {\n/**\n * @param {?} key\n * @param {?} resolvedFactories\n * @param {?} multiProvider\n */\nconstructor(\npublic key: ReflectiveKey,\npublic resolvedFactories: ResolvedReflectiveFactory[],\npublic multiProvider: boolean) { }\n/**\n * @return {?}\n */\nget resolvedFactory(): ResolvedReflectiveFactory { return this.resolvedFactories[0]; }\n}\n\nfunction ResolvedReflectiveProvider__tsickle_Closure_declarations() {\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.key;\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.resolvedFactories;\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.multiProvider;\n}\n\n/**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nexport class ResolvedReflectiveFactory {\n/**\n * @param {?} factory\n * @param {?} dependencies\n */\nconstructor(\npublic factory: Function,\npublic dependencies: ReflectiveDependency[]) { }\n}\n\nfunction ResolvedReflectiveFactory_tsickle_Closure_declarations() {\n/**\n * Factory function which can return an instance of an object represented by a key.\n * @type {?}\n */\nResolvedReflectiveFactory.prototype.factory;\n/**\n * Arguments (dependencies) to the `factory` function.\n * @type {?}\n */\nResolvedReflectiveFactory.prototype.dependencies;\n}\n\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider: NormalizedProvider): ResolvedReflectiveFactory {\n  let /** @type {?} */ factoryFn: Function;\n  let /** @type {?} */ resolvedDeps: ReflectiveDependency[];\n  if (provider.useClass) {\n    const /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n    factoryFn = reflector.factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (provider.useExisting) {\n    factoryFn = (aliasInstance: any) => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (provider.useFactory) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n * \n * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n * convenience provider syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider: NormalizedProvider): ResolvedReflectiveProvider {\n  return new ResolvedReflectiveProvider_(\n    ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers: Provider[]): ResolvedReflectiveProvider[] {\n  const /** @type {?} */ normalized = _normalizeProviders(providers, []);\n  const /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n  const /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n  return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where\n * each key is contained exactly once and multi providers\n * have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(\n  providers: ResolvedReflectiveProvider[],\n  normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>):\n  Map<number, ResolvedReflectiveProvider> {\n  for (let /** @type {?} */ i = 0; i < providers.length; i++) {\n    const /** @type {?} */ provider = providers[i];\n    const /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n    if (existing) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (let /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      let /** @type {?} */ resolvedProvider: ResolvedReflectiveProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(\n          provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers: Provider[], res: Provider[]): Provider[] {\n  providers.forEach(b => {\n    if (b instanceof Function) {\n      res.push({ provide: b, useClass: b });\n\n    } else if (b && typeof b == 'object' && ( /** @type {?} */((b as any))).provide !== undefined) {\n      res.push( /** @type {?} */((b as NormalizedProvider)));\n\n    } else if (b instanceof Array) {\n      _normalizeProviders(b, res);\n\n    } else {\n      throw new InvalidProviderError(b);\n    }\n  });\n\n  return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} dependencies\n * @return {?}\n */\nexport function constructDependencies(\n  typeOrFunc: any, dependencies: any[]): ReflectiveDependency[] {\n  if (!dependencies) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    const /** @type {?} */ params: any[][] = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc: any): ReflectiveDependency[] {\n  const /** @type {?} */ params = reflector.parameters(typeOrFunc);\n\n  if (!params) return [];\n  if (params.some(p => p == null)) {\n    throw new NoAnnotationError(typeOrFunc, params);\n  }\n  return params.map(p => _extractToken(typeOrFunc, p, params));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(\n  typeOrFunc: any, metadata: any[] | any, params: any[][]): ReflectiveDependency {\n  let /** @type {?} */ token: any = null;\n  let /** @type {?} */ optional = false;\n\n  if (!Array.isArray(metadata)) {\n    if (metadata instanceof Inject) {\n      return _createDependency(metadata.token, optional, null);\n    } else {\n      return _createDependency(metadata, optional, null);\n    }\n  }\n\n  let /** @type {?} */ visibility: Self | SkipSelf = null;\n\n  for (let /** @type {?} */ i = 0; i < metadata.length; ++i) {\n    const /** @type {?} */ paramMetadata = metadata[i];\n\n    if (paramMetadata instanceof Function) {\n      token = paramMetadata;\n\n    } else if (paramMetadata instanceof Inject) {\n      token = paramMetadata.token;\n\n    } else if (paramMetadata instanceof Optional) {\n      optional = true;\n\n    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n      visibility = paramMetadata;\n    }\n  }\n\n  token = resolveForwardRef(token);\n\n  if (token != null) {\n    return _createDependency(token, optional, visibility);\n  } else {\n    throw new NoAnnotationError(typeOrFunc, params);\n  }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(\n  token: any, optional: boolean, visibility: Self | SkipSelf): ReflectiveDependency {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringify} from '../facade/lang';\nimport {resolveForwardRef} from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n * \n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n * \n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n * \n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * \\@experimental\n */\nexport class ReflectiveKey {\n/**\n * Private\n * @param {?} token\n * @param {?} id\n */\nconstructor(public token: Object,\npublic id: number) {\n    if (!token) {\n      throw new Error('Token must be defined!');\n    }\n  }\n/**\n * Returns a stringified token.\n * @return {?}\n */\nget displayName(): string { return stringify(this.token); }\n/**\n * Retrieves a `Key` for a token.\n * @param {?} token\n * @return {?}\n */\nstatic get(token: Object): ReflectiveKey {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n/**\n * @return {?} the number of keys registered in the system.\n */\nstatic get numberOfKeys(): number { return _globalKeyRegistry.numberOfKeys; }\n}\n\nfunction ReflectiveKey_tsickle_Closure_declarations() {\n/** @type {?} */\nReflectiveKey.prototype.token;\n/** @type {?} */\nReflectiveKey.prototype.id;\n}\n\n/**\n * \\@internal\n */\nexport class KeyRegistry {\nprivate _allKeys = new Map<Object, ReflectiveKey>();\n/**\n * @param {?} token\n * @return {?}\n */\nget(token: Object): ReflectiveKey {\n    if (token instanceof ReflectiveKey) return token;\n\n    if (this._allKeys.has(token)) {\n      return this._allKeys.get(token);\n    }\n\n    const /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n/**\n * @return {?}\n */\nget numberOfKeys(): number { return this._allKeys.size; }\n}\n\nfunction KeyRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyRegistry.prototype._allKeys;\n}\n\n\nconst /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { stringify } from '../facade/lang';\nimport { ClassType } from '../type';\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @experimental\n */\nexport interface ForwardRefFn { (): any; }\n/**\n * Allows to refer to references which are not yet defined.\n * \n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared,\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\n * yet defined.\n * \n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@experimental\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): ClassType<any> {\n  ( /** @type {?} */((<any>forwardRefFn))).__forward_ref__ = forwardRef;\n  ( /** @type {?} */((<any>forwardRefFn))).toString = function () { return stringify(this()); };\n  return ( /** @type {?} */((<ClassType<any>> /** @type {?} */((<any>forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n * \n * Acts as the identity function when given a non-forward-ref value.\n * \n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n * \n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n * \n * See: {\\@link forwardRef}\n * \\@experimental\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type: any): any {\n  if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n    type.__forward_ref__ === forwardRef) {\n    return ( /** @type {?} */((<ForwardRefFn>type)))();\n  } else {\n    return type;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { BaseError, WrappedError } from '../facade/error';\nimport { stringify } from '../facade/lang';\nimport { ClassType } from '../type';\n\nimport { ReflectiveInjector } from './reflective_injector';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys: any[]): any[] {\n  const /** @type {?} */ res: any[] = [];\n  for (let /** @type {?} */ i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n    res.push(keys[i]);\n  }\n  return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys: any[]): string {\n  if (keys.length > 1) {\n    const /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n    const /** @type {?} */ tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n\n  return '';\n}\n/**\n * Base class for all errors arising from misconfigured providers.\n * \\@stable\n */\nexport class AbstractProviderError extends BaseError {\n/**\n * \\@internal\n */\nmessage: string;\n/**\n * \\@internal\n */\nkeys: ReflectiveKey[];\n/**\n * \\@internal\n */\ninjectors: ReflectiveInjector[];\n/**\n * \\@internal\n */\nconstructResolvingMessage: Function;\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n */\nconstructor(\n    injector: ReflectiveInjector, key: ReflectiveKey, constructResolvingMessage: Function) {\n    super('DI Error');\n    this.keys = [key];\n    this.injectors = [injector];\n    this.constructResolvingMessage = constructResolvingMessage;\n    this.message = this.constructResolvingMessage(this.keys);\n  }\n/**\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\naddKey(injector: ReflectiveInjector, key: ReflectiveKey): void {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    this.message = this.constructResolvingMessage(this.keys);\n  }\n}\n\nfunction AbstractProviderError_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nAbstractProviderError.prototype.message;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractProviderError.prototype.keys;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractProviderError.prototype.injectors;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractProviderError.prototype.constructResolvingMessage;\n}\n\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n * \n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n * \n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * \\@stable\n */\nexport class NoProviderError extends AbstractProviderError {\n/**\n * @param {?} injector\n * @param {?} key\n */\nconstructor(injector: ReflectiveInjector, key: ReflectiveKey) {\n    super(injector, key, function (keys: any[]) {\n      const first = stringify(keys[0].token);\n      return `No provider for ${first}!${constructResolvingPath(keys)}`;\n    });\n  }\n}\n/**\n * Thrown when dependencies form a cycle.\n * \n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n * \n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n * \n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n * \n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * \\@stable\n */\nexport class CyclicDependencyError extends AbstractProviderError {\n/**\n * @param {?} injector\n * @param {?} key\n */\nconstructor(injector: ReflectiveInjector, key: ReflectiveKey) {\n    super(injector, key, function (keys: any[]) {\n      return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n    });\n  }\n}\n/**\n * Thrown when a constructing type returns with an Error.\n * \n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n * \n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * \\@stable\n */\nexport class InstantiationError extends WrappedError {\n/**\n * \\@internal\n */\nkeys: ReflectiveKey[];\n/**\n * \\@internal\n */\ninjectors: ReflectiveInjector[];\n/**\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n */\nconstructor(\n    injector: ReflectiveInjector, originalException: any, originalStack: any,\n    key: ReflectiveKey) {\n    super('DI Error', originalException);\n    this.keys = [key];\n    this.injectors = [injector];\n  }\n/**\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\naddKey(injector: ReflectiveInjector, key: ReflectiveKey): void {\n    this.injectors.push(injector);\n    this.keys.push(key);\n  }\n/**\n * @return {?}\n */\nget message(): string {\n    const /** @type {?} */ first = stringify(this.keys[0].token);\n    return `${this.originalError.message}: Error during instantiation ` +\n      `of ${first}!${constructResolvingPath(this.keys)}.`;\n  }\n/**\n * @return {?}\n */\nget causeKey(): ReflectiveKey { return this.keys[0]; }\n}\n\nfunction InstantiationError_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nInstantiationError.prototype.keys;\n/**\n * \\@internal\n * @type {?}\n */\nInstantiationError.prototype.injectors;\n}\n\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n * \n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n * \n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * \\@stable\n */\nexport class InvalidProviderError extends BaseError {\n/**\n * @param {?} provider\n */\nconstructor(provider: any) {\n    super(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n  }\n}\n/**\n * Thrown when the class has no annotation information.\n * \n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n * \n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n * \n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * \n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n * \n * ```typescript\n * class B {}\n * \n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n * \n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n * \\@stable\n */\nexport class NoAnnotationError extends BaseError {\n/**\n * @param {?} typeOrFunc\n * @param {?} params\n */\nconstructor(typeOrFunc: ClassType<any> | Function, params: any[][]) {\n    super(NoAnnotationError._genMessage(typeOrFunc, params));\n  }\n/**\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nprivate static _genMessage(typeOrFunc: ClassType<any> | Function, params: any[][]) {\n    const /** @type {?} */ signature: string[] = [];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n      const /** @type {?} */ parameter = params[i];\n      if (!parameter || parameter.length == 0) {\n        signature.push('?');\n      } else {\n        signature.push(parameter.map(stringify).join(' '));\n      }\n    }\n    return 'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n      signature.join(', ') + '). ' +\n      'Make sure that all the parameters are decorated with Inject or have valid type ' +\n      'annotations and that \\'' + stringify(typeOrFunc) + '\\' is decorated with Injectable.';\n  }\n}\n/**\n * Thrown when getting an object by index.\n * \n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n * \n * ```typescript\n * class A {}\n * \n * var injector = Injector.resolveAndCreate([A]);\n * \n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n * \\@stable\n */\nexport class OutOfBoundsError extends BaseError {\n/**\n * @param {?} index\n */\nconstructor(index: number) { super(`Index ${index} is out-of-bounds.`); }\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n * \n * ### Example\n * \n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\nexport class MixingMultiProvidersWithRegularProvidersError extends BaseError {\n/**\n * @param {?} provider1\n * @param {?} provider2\n */\nconstructor(provider1: any, provider2: any) {\n    super(\n      'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +\n      provider2.toString());\n  }\n}\n","import { stringify } from '../facade/lang';\nimport { ClassType } from '../type';\nimport { InjectionToken } from './injection_token';\n\nconst /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\nexport const /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nclass _NullInjector implements Injector {\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = _THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      throw new Error(`No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n/**\n * \\@whatItDoes Injector interface\n * \\@howToUse \n * ```\n * const injector: Injector = ...;\n * injector.get(...);\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n * \n * `Injector` returns itself when given `Injector` as a token:\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n * \n * \\@stable\n * @abstract\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n  static NULL: Injector = new _NullInjector();\n/**\n * Retrieves an instance from the injector based on the provided token.\n * If not found:\n * - Throws {\\@link NoProviderError} if no `notFoundValue` that is not equal to\n * Injector.THROW_IF_NOT_FOUND is given\n * - Returns the `notFoundValue` otherwise\n * @abstract\n * @template T\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget<T>(token: Function | ClassType<T> | InjectionToken<T>, notFoundValue?: T) {}\n/**\n * @deprecated from v4.0.0 use Type<T> or InjectToken<T>\n * @suppress {duplicate}\n * @abstract\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any) {}\n}\n\nfunction Injector_tsickle_Closure_declarations() {\n/** @type {?} */\nInjector.THROW_IF_NOT_FOUND;\n/** @type {?} */\nInjector.NULL;\n}\n\n","import { BaseError } from '../facade/error';\nimport { stringify } from '../facade/lang';\nimport { ClassType } from '../type';\nexport class PlatformAlreadyExistsError extends BaseError {\nconstructor() {\n    super(`A platform already exists. Destroy it first before creating this one.`);\n  }\n}\n","\n/**\n * Convenience to throw an Error with 'unimplemented' as the message.\n * @return {?}\n */\nexport function unimplemented(): any {\n  throw new Error('unimplemented');\n}\nexport class BaseError extends Error {\n/**\n * \\@internal *\n */\n_nativeError: Error;\n/**\n * @param {?} message\n */\nconstructor(message: string) {\n    super(message);\n    // Errors don't use current this, instead they create a new instance.\n    // We have to do forward all of our api to the nativeInstance.\n    const nativeError = new Error(message) as any as Error;\n    this._nativeError = nativeError;\n  }\n/**\n * @return {?}\n */\nget message() { return this._nativeError.message; }\n/**\n * @param {?} message\n * @return {?}\n */\nset message(message) { this._nativeError.message = message; }\n/**\n * @return {?}\n */\nget name() { return this._nativeError.name; }\n/**\n * @return {?}\n */\nget stack() { return ( /** @type {?} */((this._nativeError as any))).stack; }\n/**\n * @param {?} value\n * @return {?}\n */\nset stack(value) { ( /** @type {?} */((this._nativeError as any))).stack = value; }\n/**\n * @return {?}\n */\ntoString() { return this._nativeError.toString(); }\n}\n\nfunction BaseError_tsickle_Closure_declarations() {\n/**\n * \\@internal *\n * @type {?}\n */\nBaseError.prototype._nativeError;\n}\n\nexport class WrappedError extends BaseError {\n  originalError: any;\n/**\n * @param {?} message\n * @param {?} error\n */\nconstructor(message: string, error: any) {\n    super(`${message} caused by: ${error instanceof Error ? error.message : error}`);\n    this.originalError = error;\n  }\n/**\n * @return {?}\n */\nget stack() {\n    return ( /** @type {?} */(((this.originalError instanceof Error ? this.originalError : this._nativeError) as any)))\n      .stack;\n  }\n}\n\nfunction WrappedError_tsickle_Closure_declarations() {\n/** @type {?} */\nWrappedError.prototype.originalError;\n}\n\n","import { ListWrapper, StringMapWrapper } from '../facade/collection';\nimport { stringify } from '../facade/lang';\nimport { ClassType } from '../type';\nimport { Component, HostListener, ChildListener } from './metadata';\nimport { reflector } from '../reflection/reflection';\nimport { ReflectorReader } from '../reflection/reflector_reader';\nimport { Injectable } from '../di/metadata';\nexport class ComponentResolver {\nprivate _resolved = new Map<ClassType<any>, Component>();\n/**\n * @param {?=} _reflector\n */\nconstructor(private _reflector: ReflectorReader = reflector) { }\n/**\n * Resolve the metadata of a Component.\n * \n * \\@memberOf ComponentResolver\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?} component metadata\n */\nresolve(type: ClassType<any>, throwIfNotFound = true): Component {\n    let /** @type {?} */ resolved = this._resolved.get(type);\n    if (resolved) {\n      return resolved;\n    }\n    const /** @type {?} */ metadata: Component =\n      ListWrapper.findLast(this._reflector.annotations(type), obj => obj instanceof Component);\n    if (metadata) {\n      const /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);\n      return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n    } else {\n      if (throwIfNotFound) {\n        throw new Error(`No Component metadata found for '${stringify(type)}'.`);\n      }\n      return null;\n    }\n  }\n/**\n * @param {?} meta\n * @param {?} propertyMetadata\n * @param {?} type\n * @return {?}\n */\nprivate _mergeWithPropertyMetadata(meta: Component, propertyMetadata: {[key: string]: any[]},\n      type: ClassType<any>): Component {\n    const /** @type {?} */ host: {[key: string]: string} = {};\n    const /** @type {?} */ childs: {[key: string]: string} = {};\n\n    Object.keys(propertyMetadata).forEach((propName: string) => {\n      const /** @type {?} */ hostListeners = propertyMetadata[propName]\n        .filter(a => a && a instanceof HostListener);\n      hostListeners.forEach(hostListener => {\n        const /** @type {?} */ args = hostListener.args || [];\n        host[`(${hostListener.eventName})`] = `${propName}(${args.join(',')})`;\n      });\n      const /** @type {?} */ childListeners = propertyMetadata[propName]\n        .filter(a => a && a instanceof ChildListener);\n      childListeners.forEach(childListener => {\n        const /** @type {?} */ args = childListener.args || [];\n        childs[`${childListener.selector};(${childListener.eventName})`] =\n          `${propName}(${args.join(',')})`;\n      });\n    });\n\n    const /** @type {?} */ resolved = new Component({\n      selector: meta.selector,\n      host: meta.host ? StringMapWrapper.merge(meta.host, host) : host,\n      childs: meta.childs ? StringMapWrapper.merge(meta.childs, childs) : childs,\n      providers: meta.providers,\n      components: meta.components\n    });\n    this._resolved.set(type, resolved);\n    return resolved;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ReflectorReader, },\n];\n}\n\nfunction ComponentResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nComponentResolver.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nComponentResolver.ctorParameters;\n/** @type {?} */\nComponentResolver.prototype._resolved;\n/** @type {?} */\nComponentResolver.prototype._reflector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// tslint:disable:variable-name\n\n\nimport {makeDecorator, makeParamDecorator} from '../utils/decorator';\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @stable\n */\nexport interface InjectDecorator {\n  /**\n   * @whatItDoes A parameter decorator that specifies a dependency.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Inject(\"MyEngine\") public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Inject'}\n   *\n   * When `@Inject()` is not present, {@link Injector} will use the type annotation of the\n   * parameter.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n   *\n   * @stable\n   */\n  (token: any): any;\n  new (token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n * @stable\n */\nexport interface Inject { token: any; }\n/**\n * Inject decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const Inject: InjectDecorator = makeParamDecorator('Inject', [['token', undefined]]);\n\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @stable\n */\nexport interface OptionalDecorator {\n  /**\n   * @whatItDoes A parameter metadata that marks a dependency as optional.\n   * {@link Injector} provides `null` if the dependency is not found.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Optional() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Optional'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @stable\n */\nexport interface Optional {}\n/**\n * Optional decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const Optional: OptionalDecorator = makeParamDecorator('Optional', []);\n\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @stable\n */\nexport interface InjectableDecorator {\n  /**\n   * @whatItDoes A marker metadata that marks a class as available to {@link Injector} for creation.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {}\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n   *\n   * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that\n   * does not have `@Injectable` marker, as shown in the example below.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectableThrows'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): Injectable;\n}\n\n/**\n * Type of the Injectable metadata.\n *\n * @stable\n */\nexport interface Injectable {}\n/**\n * Injectable decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const Injectable: InjectableDecorator = <InjectableDecorator>makeDecorator('Injectable', []);\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @stable\n */\nexport interface SelfDecorator {\n  /**\n   * @whatItDoes Specifies that an {@link Injector} should retrieve a dependency only from itself.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Self() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Self'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n * @stable\n */\nexport interface Self {}\n/**\n * Self decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const Self: SelfDecorator = makeParamDecorator('Self', []);\n\n\n/**\n * Type of the SkipSelf decorator / constructor function.\n *\n * @stable\n */\nexport interface SkipSelfDecorator {\n  /**\n   * @whatItDoes Specifies that the dependency resolution should start from the parent injector.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@SkipSelf() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): SkipSelf;\n}\n\n/**\n * Type of the SkipSelf metadata.\n *\n * @stable\n */\nexport interface SkipSelf {}\n/**\n * SkipSelf decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const SkipSelf: SkipSelfDecorator = makeParamDecorator('SkipSelf', []);\n\n/**\n * Type of the Host decorator / constructor function.\n *\n * @stable\n */\nexport interface HostDecorator {\n  /**\n   * @whatItDoes Specifies that an injector should retrieve a dependency from any injector until\n   * reaching the host element of the current component.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {\n   *   constructor(@Host() public engine:Engine) {}\n   * }\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Host'}\n   *\n   * @stable\n   */\n  (): any;\n  new (): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n * @stable\n */\nexport interface Host {}\n/**\n * Host decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const Host: HostDecorator = makeParamDecorator('Host', []);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ReflectionCapabilities} from './reflection_capabilities';\nimport {Reflector} from './reflector';\n\nexport {Reflector} from './reflector';\n/**\n * The {\\@link Reflector} used internally in Angular to access metadata\n * about symbols.\n */\nexport const reflector = new Reflector(new ReflectionCapabilities());\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '../type';\nimport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nimport {ReflectorReader} from './reflector_reader';\nimport {GetterFn, MethodFn, SetterFn} from './types';\n\nexport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nexport {GetterFn, MethodFn, SetterFn} from './types';\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport class Reflector extends ReflectorReader {\n/**\n * @param {?} reflectionCapabilities\n */\nconstructor(public reflectionCapabilities: PlatformReflectionCapabilities) { super(); }\n/**\n * @param {?} caps\n * @return {?}\n */\nupdateCapabilities(caps: PlatformReflectionCapabilities) { this.reflectionCapabilities = caps; }\n/**\n * @param {?} type\n * @return {?}\n */\nfactory(type: Type<any>): Function { return this.reflectionCapabilities.factory(type); }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nparameters(typeOrFunc: Type<any>): any[][] {\n    return this.reflectionCapabilities.parameters(typeOrFunc);\n  }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nannotations(typeOrFunc: Type<any>): any[] {\n    return this.reflectionCapabilities.annotations(typeOrFunc);\n  }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\npropMetadata(typeOrFunc: Type<any>): {[key: string]: any[]} {\n    return this.reflectionCapabilities.propMetadata(typeOrFunc);\n  }\n/**\n * @param {?} type\n * @param {?} lcProperty\n * @return {?}\n */\nhasLifecycleHook(type: any, lcProperty: string): boolean {\n    return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ngetter(name: string): GetterFn { return this.reflectionCapabilities.getter(name); }\n/**\n * @param {?} name\n * @return {?}\n */\nsetter(name: string): SetterFn { return this.reflectionCapabilities.setter(name); }\n/**\n * @param {?} name\n * @return {?}\n */\nmethod(name: string): MethodFn { return this.reflectionCapabilities.method(name); }\n/**\n * @param {?} type\n * @return {?}\n */\nimportUri(type: any): string { return this.reflectionCapabilities.importUri(type); }\n/**\n * @param {?} type\n * @return {?}\n */\nresourceUri(type: any): string { return this.reflectionCapabilities.resourceUri(type); }\n/**\n * @param {?} name\n * @param {?} moduleUrl\n * @param {?} members\n * @param {?} runtime\n * @return {?}\n */\nresolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any {\n    return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n  }\n/**\n * @param {?} identifier\n * @param {?} name\n * @return {?}\n */\nresolveEnum(identifier: any, name: string): any {\n    return this.reflectionCapabilities.resolveEnum(identifier, name);\n  }\n}\n\nfunction Reflector_tsickle_Closure_declarations() {\n/** @type {?} */\nReflector.prototype.reflectionCapabilities;\n}\n\n","\n/**\n * Provides read-only access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n * @abstract\n */\nexport abstract class ReflectorReader {\n/**\n * @abstract\n * @param {?} typeOrFunc\n * @return {?}\n */\nparameters(typeOrFunc: /*Type*/ any) {}\n/**\n * @abstract\n * @param {?} typeOrFunc\n * @return {?}\n */\nannotations(typeOrFunc: /*Type*/ any) {}\n/**\n * @abstract\n * @param {?} typeOrFunc\n * @return {?}\n */\npropMetadata(typeOrFunc: /*Type*/ any) {}\n/**\n * @abstract\n * @param {?} typeOrFunc\n * @return {?}\n */\nimportUri(typeOrFunc: /*Type*/ any) {}\n/**\n * @abstract\n * @param {?} typeOrFunc\n * @return {?}\n */\nresourceUri(typeOrFunc: /*Type*/ any) {}\n/**\n * @abstract\n * @param {?} name\n * @param {?} moduleUrl\n * @param {?} members\n * @param {?} runtime\n * @return {?}\n */\nresolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any) {}\n/**\n * @abstract\n * @param {?} identifier\n * @param {?} name\n * @return {?}\n */\nresolveEnum(identifier: any, name: string) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type, isType} from '../type';\nimport {global, stringify} from '../facade/lang';\nimport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nimport {GetterFn, MethodFn, SetterFn} from './types';\n/**\n * Attention: This regex has to hold even if the code is minified!\n */\nexport const DELEGATE_CTOR =\n    /^function\\s+\\S+\\(\\)\\s*{\\s*(\"use strict\";)?\\s*(return\\s+)?(\\S+\\s+!==\\s+null\\s+&&\\s+)?\\S+\\.apply\\(this,\\s*arguments\\)/;\nexport class ReflectionCapabilities implements PlatformReflectionCapabilities {\nprivate _reflect: any;\n/**\n * @param {?=} reflect\n */\nconstructor(reflect?: any) { this._reflect = reflect || global['Reflect']; }\n/**\n * @return {?}\n */\nisReflectionEnabled(): boolean { return true; }\n/**\n * @template T\n * @param {?} t\n * @return {?}\n */\nfactory<T>(t: Type<T>): (args: any[]) => T { return (...args: any[]) => new t(...args); }\n/**\n * \\@internal\n * @param {?} paramTypes\n * @param {?} paramAnnotations\n * @return {?}\n */\n_zipTypesAndAnnotations(paramTypes: any[], paramAnnotations: any[]): any[][] {\n    let /** @type {?} */ result: any[][];\n\n    if (typeof paramTypes === 'undefined') {\n      result = new Array(paramAnnotations.length);\n    } else {\n      result = new Array(paramTypes.length);\n    }\n\n    for (let /** @type {?} */ i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n/**\n * @param {?} type\n * @param {?} parentCtor\n * @return {?}\n */\nprivate _ownParameters(type: Type<any>, parentCtor: any): any[][] {\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (DELEGATE_CTOR.exec(type.toString())) {\n      return null;\n    }\n\n    // Prefer the direct API.\n    if (( /** @type {?} */((<any>type))).parameters && ( /** @type {?} */((<any>type))).parameters !== parentCtor.parameters) {\n      return ( /** @type {?} */((<any>type))).parameters;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    const /** @type {?} */ tsickleCtorParams = ( /** @type {?} */((<any>type))).ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const /** @type {?} */ ctorParameters =\n          typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const /** @type {?} */ paramTypes = ctorParameters.map((ctorParam: any) => ctorParam && ctorParam.type);\n      const /** @type {?} */ paramAnnotations = ctorParameters.map(\n          (ctorParam: any) =>\n              ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (this._reflect != null && this._reflect.getOwnMetadata != null) {\n      const /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);\n      const /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);\n      if (paramTypes || paramAnnotations) {\n        return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n      }\n    }\n\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return new Array(( /** @type {?} */((<any>type.length)))).fill(undefined);\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nparameters(type: Type<any>): any[][] {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const /** @type {?} */ parentCtor = getParentCtor(type);\n    let /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n/**\n * @param {?} typeOrFunc\n * @param {?} parentCtor\n * @return {?}\n */\nprivate _ownAnnotations(typeOrFunc: Type<any>, parentCtor: any): any[] {\n    // Prefer the direct API.\n    if (( /** @type {?} */((<any>typeOrFunc))).annotations && ( /** @type {?} */((<any>typeOrFunc))).annotations !== parentCtor.annotations) {\n      let /** @type {?} */ annotations = ( /** @type {?} */((<any>typeOrFunc))).annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if (( /** @type {?} */((<any>typeOrFunc))).decorators && ( /** @type {?} */((<any>typeOrFunc))).decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata(( /** @type {?} */((<any>typeOrFunc))).decorators);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (this._reflect && this._reflect.getOwnMetadata) {\n      return this._reflect.getOwnMetadata('annotations', typeOrFunc);\n    }\n  }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nannotations(typeOrFunc: Type<any>): any[] {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n    const /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n/**\n * @param {?} typeOrFunc\n * @param {?} parentCtor\n * @return {?}\n */\nprivate _ownPropMetadata(typeOrFunc: any, parentCtor: any): {[key: string]: any[]} {\n    // Prefer the direct API.\n    if (( /** @type {?} */((<any>typeOrFunc))).propMetadata &&\n        ( /** @type {?} */((<any>typeOrFunc))).propMetadata !== parentCtor.propMetadata) {\n      let /** @type {?} */ propMetadata = ( /** @type {?} */((<any>typeOrFunc))).propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if (( /** @type {?} */((<any>typeOrFunc))).propDecorators &&\n        ( /** @type {?} */((<any>typeOrFunc))).propDecorators !== parentCtor.propDecorators) {\n      const /** @type {?} */ propDecorators = ( /** @type {?} */((<any>typeOrFunc))).propDecorators;\n      const /** @type {?} */ propMetadata = /** @type {?} */(( <{[key: string]: any[]}>{}));\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (this._reflect && this._reflect.getOwnMetadata) {\n      return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);\n    }\n  }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\npropMetadata(typeOrFunc: any): {[key: string]: any[]} {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n    const /** @type {?} */ propMetadata: {[key: string]: any[]} = {};\n    if (parentCtor !== Object) {\n      const /** @type {?} */ parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach((propName) => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach((propName) => {\n        const /** @type {?} */ decorators: any[] = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n/**\n * @param {?} type\n * @param {?} lcProperty\n * @return {?}\n */\nhasLifecycleHook(type: any, lcProperty: string): boolean {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ngetter(name: string): GetterFn { return /** @type {?} */(( <GetterFn>new Function('o', 'return o.' + name + ';'))); }\n/**\n * @param {?} name\n * @return {?}\n */\nsetter(name: string): SetterFn {\n    return /** @type {?} */(( <SetterFn>new Function('o', 'v', 'return o.' + name + ' = v;')));\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nmethod(name: string): MethodFn {\n    const /** @type {?} */ functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n    return /** @type {?} */(( <MethodFn>new Function('o', 'args', functionBody)));\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nimportUri(type: any): string {\n    // StaticSymbol\n    if (typeof type === 'object' && type['filePath']) {\n      return type['filePath'];\n    }\n    // Runtime type\n    return `./${stringify(type)}`;\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nresourceUri(type: any): string { return `./${stringify(type)}`; }\n/**\n * @param {?} name\n * @param {?} moduleUrl\n * @param {?} members\n * @param {?} runtime\n * @return {?}\n */\nresolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any {\n    return runtime;\n  }\n/**\n * @param {?} enumIdentifier\n * @param {?} name\n * @return {?}\n */\nresolveEnum(enumIdentifier: any, name: string): any { return enumIdentifier[name]; }\n}\n\nfunction ReflectionCapabilities_tsickle_Closure_declarations() {\n/** @type {?} */\nReflectionCapabilities.prototype._reflect;\n}\n\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations: any[]): any[] {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const /** @type {?} */ decoratorType = decoratorInvocation.type;\n    const /** @type {?} */ annotationCls = decoratorType.annotationCls;\n    const /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor: Function): Type<any> {\n  const /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);\n  const /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n","export interface ClassType<T> extends Function {\n  new (...args: Array<any>): T;\n  constructor: Function | any[];\n  [propertyName: string]: any;\n  name: string;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isClassInstance(instance: any): boolean {\n  return typeof instance === 'object' && !!instance['constructor'];\n}\n\n// tslint:disable:variable-name\nexport const /** @type {?} */ Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\nexport interface Type<T> extends Function { new (...args: any[]): T; }\n","// tslint:disable:variable-name\n\n\nimport { makeDecorator, TypeDecorator, makePropDecorator } from '../utils/decorator';\nimport { stringify } from '../facade/lang';\nimport { ClassType } from '../type';\nimport { Provider } from '../di/provider';\n\n/** Type of the Component decorator / constructor function. */\nexport interface ComponentDecorator {\n  (obj: Component): TypeDecorator;\n  new (obj: Component): Component;\n}\n\n/** Type of the Component metadata. */\nexport interface Component {\n  /**\n   * The CSS selector that triggers the instantiation of a directive.\n   *\n   * Mojiito only allows components to trigger on CSS selectors that do not cross element\n   * boundaries.\n   *\n   * `selector` may be declared as one of the following:\n   *\n   * - `element-name`: select by element name.\n   * - `.class`: select by class name.\n   * - `[attribute]`: select by attribute name.\n   * - `[attribute=value]`: select by attribute name and value.\n   * - `:not(sub_selector)`: select only if the element does not match the `sub_selector`.\n   * - `selector1, selector2`: select if either `selector1` or `selector2` matches.\n   */\n  selector?: string;\n\n  /**\n   * Defines the set of injectable objects that are visible to a Components.\n   */\n  providers?: Provider[];\n\n  /**\n   * Defines a list of components which belong to this component and\n   * can be instantiated.\n   *\n   * When creating this component, mojiito will look for them in the\n   * DOM and create them if found.\n   */\n  components?: any[] | any[][];\n\n  /**\n   * Specify the events, actions, properties and attributes related to the host element.\n   */\n  host?: {[key: string]: string};\n\n  /**\n   * Specify the events, actions, properties and attributes related to child elements.\n   */\n  childs?: {[key: string]: string};\n}\n/**\n * Component decorator and metadata.\n * \n * \\@Annotation\n */\nexport const Component: ComponentDecorator = <ComponentDecorator>makeDecorator('Component', {\n  selector: undefined,\n  providers: undefined,\n  components: undefined,\n  host: undefined,\n  childs: undefined,\n});\n\n\n/** Type of the HostListener decorator / constructor function. */\nexport interface HostListenerDecorator {\n  /** Declares a host listener. */\n  (eventName: string, args?: string[]): any;\n  new (eventName: string, args?: string[]): any;\n}\n\n/** Type of the HostListener metadata. */\nexport interface HostListener {\n  eventName?: string;\n  args?: string[];\n}\n/**\n * HostListener decorator and metadata.\n * \n * \\@Annotation\n */\nexport const HostListener: HostListenerDecorator =\n    makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);\n\n/** Type of the ChildListener decorator / constructor function. */\nexport interface ChildListenerDecorator {\n  /** Declares a Child listener. */\n  (selector: string, eventName: string, args?: string[]): any;\n  new (selector: string, eventName: string, args?: string[]): any;\n}\n\n/** Type of the ChildListener metadata. */\nexport interface ChildListener {\n  selector?: string;\n  eventName?: string;\n  args?: string[];\n}\n/**\n * ChildListener decorator and metadata.\n * \n * \\@Annotation\n */\nexport const ChildListener: ChildListenerDecorator =\n    makePropDecorator('ChildListener', [\n      ['selector', undefined],\n      ['eventName', undefined],\n      ['args', []]\n    ]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { global, stringify } from '../facade/lang';\nimport { ClassType } from '../type';\n\nlet /** @type {?} */ _nextClassId = 0;\nconst /** @type {?} */ Reflect = global.Reflect;\n\n\nexport interface TypeDecorator {\n  <T extends ClassType<any>>(type: T): T;\n  (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\n  annotations: any[];\n  Class(obj: ClassType<any>): ClassType<any>;\n}\n/**\n * @param {?} annotation\n * @return {?}\n */\nfunction extractAnnotation(annotation: any): any {\n  if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {\n    // it is a decorator, extract annotation\n    annotation = annotation.annotation;\n  }\n  return annotation;\n}\n/**\n * @param {?} fnOrArray\n * @param {?} key\n * @return {?}\n */\nfunction applyParams(fnOrArray: (Function | any[]), key: string): Function {\n  if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||\n    fnOrArray === Number || fnOrArray === Array) {\n    throw new Error(`Can not use native ${stringify(fnOrArray)} as constructor`);\n  }\n\n  if (typeof fnOrArray === 'function') {\n    return fnOrArray;\n  }\n\n  if (Array.isArray(fnOrArray)) {\n    const /** @type {?} */ annotations: any[] = fnOrArray;\n    const /** @type {?} */ annoLength = annotations.length - 1;\n    const /** @type {?} */ fn: Function = fnOrArray[annoLength];\n    if (typeof fn !== 'function') {\n      throw new Error(`Last position of Class method array must be ` +\n        `Function in key ${key} was '${stringify(fn)}'`);\n    }\n    if (annoLength != fn.length) {\n      throw new Error(`Number of annotations (${annoLength}) does not match ` +\n        `number of arguments (${fn.length}) in the function: ${stringify(fn)}`);\n    }\n    const /** @type {?} */ paramsAnnotations: any[][] = [];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {\n      const /** @type {?} */ paramAnnotations: any[] = [];\n      paramsAnnotations.push(paramAnnotations);\n      const /** @type {?} */ annotation = annotations[i];\n      if (Array.isArray(annotation)) {\n        for (let /** @type {?} */ j = 0; j < annotation.length; j++) {\n          paramAnnotations.push(extractAnnotation(annotation[j]));\n        }\n      } else if (typeof annotation === 'function') {\n        paramAnnotations.push(extractAnnotation(annotation));\n      } else {\n        paramAnnotations.push(annotation);\n      }\n    }\n    Reflect.defineMetadata('parameters', paramsAnnotations, fn);\n    return fn;\n  }\n\n  throw new Error(`Only Function or Array is supported in Class ` +\n    `definition for key '${key}' is '${stringify(fnOrArray)}'`);\n}\n/**\n * @param {?} name\n * @param {?} props\n * @param {?=} parentClass\n * @param {?=} chainFn\n * @return {?}\n */\nexport function makeDecorator(\n  name: string, props: { [name: string]: any }, parentClass?: any,\n  chainFn: (fn: Function) => void = null): (...args: any[]) => (cls: any) => any {\n  const /** @type {?} */ metaCtor = makeMetadataCtor([props]);\n/**\n * @param {?} objOrType\n * @return {?}\n */\nfunction DecoratorFactory(objOrType: any): (cls: any) => any {\n    if (!(Reflect && Reflect.getOwnMetadata)) {\n      throw 'reflect-metadata shim is required when using class decorators';\n    }\n\n    if (this instanceof DecoratorFactory) {\n      metaCtor.call(this, objOrType);\n      return this;\n    }\n\n    const /** @type {?} */ annotationInstance = new ( /** @type {?} */((<any>DecoratorFactory)))(objOrType);\n    const /** @type {?} */ chainAnnotation =\n      typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];\n    chainAnnotation.push(annotationInstance);\n    // tslint:disable-next-line:variable-name\n    const /** @type {?} */ TypeDecorator: TypeDecorator = /** @type {?} */((\n      <TypeDecorator>function TypeDecorator(cls: ClassType<any>) {\n        const /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];\n        annotations.push(annotationInstance);\n        Reflect.defineMetadata('annotations', annotations, cls);\n        return cls;\n      }));\n    TypeDecorator.annotations = chainAnnotation;\n    // TypeDecorator.Class = Class;\n    if (chainFn) chainFn(TypeDecorator);\n    return TypeDecorator;\n  }\n\n  if (parentClass) {\n    DecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n\n  DecoratorFactory.prototype.toString = () => `@${name}`;\n  ( /** @type {?} */((<any>DecoratorFactory))).annotationCls = DecoratorFactory;\n  return DecoratorFactory;\n}\n/**\n * @param {?} props\n * @return {?}\n */\nfunction makeMetadataCtor(props: ([string, any] | { [key: string]: any })[]): any {\n  return function ctor(...args: any[]) {\n    props.forEach((prop, i) => {\n      const /** @type {?} */ argVal = args[i];\n      if (Array.isArray(prop)) {\n        // plain parameter\n        this[prop[0]] = argVal === undefined ? prop[1] : argVal;\n      } else {\n        for (const /** @type {?} */ propName in prop) {\n          this[propName] =\n            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];\n        }\n      }\n    });\n  };\n}\n/**\n * @param {?} name\n * @param {?} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makeParamDecorator(\n  name: string, props: ([string, any] | { [name: string]: any })[], parentClass?: any): any {\n  const /** @type {?} */ metaCtor = makeMetadataCtor(props);\n/**\n * @param {...?} args\n * @return {?}\n */\nfunction ParamDecoratorFactory(...args: any[]): any {\n    if (this instanceof ParamDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n    const /** @type {?} */ annotationInstance = new ( /** @type {?} */((<any>ParamDecoratorFactory)))(...args);\n\n    ( /** @type {?} */((<any>ParamDecorator))).annotation = annotationInstance;\n    return ParamDecorator;\n/**\n * @param {?} cls\n * @param {?} unusedKey\n * @param {?} index\n * @return {?}\n */\nfunction ParamDecorator(cls: any, unusedKey: any, index: number): any {\n      const /** @type {?} */ parameters: any[][] = Reflect.getOwnMetadata('parameters', cls) || [];\n\n      // there might be gaps if some in between parameters do not have annotations.\n      // we pad with nulls.\n      while (parameters.length <= index) {\n        parameters.push(null);\n      }\n\n      parameters[index] = parameters[index] || [];\n      parameters[index].push(annotationInstance);\n\n      Reflect.defineMetadata('parameters', parameters, cls);\n      return cls;\n    }\n  }\n  if (parentClass) {\n    ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n  ParamDecoratorFactory.prototype.toString = () => `@${name}`;\n  ( /** @type {?} */((<any>ParamDecoratorFactory))).annotationCls = ParamDecoratorFactory;\n  return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makePropDecorator(\n  name: string, props: ([string, any] | { [key: string]: any })[], parentClass?: any): any {\n  const /** @type {?} */ metaCtor = makeMetadataCtor(props);\n/**\n * @param {...?} args\n * @return {?}\n */\nfunction PropDecoratorFactory(...args: any[]): any {\n    if (this instanceof PropDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n\n    const /** @type {?} */ decoratorInstance = new ( /** @type {?} */((<any>PropDecoratorFactory)))(...args);\n\n    // tslint:disable-next-line:no-shadowed-variable\n    return function PropDecorator(target: any, name: string) {\n      const /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};\n      meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n      meta[name].unshift(decoratorInstance);\n      Reflect.defineMetadata('propMetadata', meta, target.constructor);\n    };\n  }\n\n  if (parentClass) {\n    PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n\n  PropDecoratorFactory.prototype.toString = () => `@${name}`;\n  ( /** @type {?} */((<any>PropDecoratorFactory))).annotationCls = PropDecoratorFactory;\n  return PropDecoratorFactory;\n}\n","\n/**\n * Returns the class name of a type.\n * \n * @export\n * @template T\n * @param {?} klass\n * @return {?}\n */\nexport function getClassName<T>(klass: Function) {\n  return ( /** @type {?} */((klass as any))).name ? ( /** @type {?} */((klass as any))).name :\n    /^function\\s+([\\w\\$]+)\\s*\\(/.exec(this.toString())[1];\n}\n/**\n * Tries to stringify a token. A token can be any type.\n * \n * @export\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token === undefined || token === null) {\n    return '' + token;\n  }\n  if (token.name) {\n    return token.name;\n  }\n  if (token.overriddenName) {\n    return token.overriddenName;\n  }\n  if (typeof token === 'function') {\n      return getClassName(token);\n  }\n  if (token instanceof HTMLElement) {\n    let /** @type {?} */ parts = token.toString().match(/\\w+/g);\n    if (parts && parts.length) {\n      return parts[parts.length - 1];\n    }\n  }\n\n  var /** @type {?} */ res = token.toString();\n  var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n  return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);\n}\n\nexport interface BrowserNodeGlobal {\n  Object: typeof Object;\n  Array: typeof Array;\n  Map: typeof Map;\n  Set: typeof Set;\n  Date: DateConstructor;\n  RegExp: RegExpConstructor;\n  JSON: typeof JSON;\n  Math: any;  // typeof Math;\n  assert(condition: any): void;\n  Reflect: any;\n  setTimeout: Function;\n  clearTimeout: Function;\n  setInterval: Function;\n  clearInterval: Function;\n  encodeURI: Function;\n}\n\ndeclare var WorkerGlobalScope: any;\ndeclare var global: any;\nlet /** @type {?} */ globalScope: BrowserNodeGlobal;\nif (typeof window === 'undefined') {\n  if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n    // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n    globalScope = /** @type {?} */(( <any>self));\n  } else {\n    globalScope = /** @type {?} */(( <any>global));\n  }\n} else {\n  globalScope = /** @type {?} */(( <any>window));\n}\nexport {globalScope as global};\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isPresent(obj: any): boolean {\n  return obj != null;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isBlank(obj: any): boolean {\n  return obj == null;\n}\nexport class NumberWrapper {\n/**\n * @param {?} text\n * @return {?}\n */\nstatic parseIntAutoRadix(text: string): number {\n    const /** @type {?} */ result: number = parseInt(text);\n    if (isNaN(result)) {\n      throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nstatic isNumeric(value: any): boolean { return !isNaN(value - parseFloat(value)); }\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class StringMapWrapper {\n/**\n * @template V\n * @param {?} m1\n * @param {?} m2\n * @return {?}\n */\nstatic merge<V>(m1: {[key: string]: V}, m2: {[key: string]: V}): {[key: string]: V} {\n    const /** @type {?} */ m: {[key: string]: V} = {};\n\n    for (const /** @type {?} */ k of Object.keys(m1)) {\n      m[k] = m1[k];\n    }\n\n    for (const /** @type {?} */ k of Object.keys(m2)) {\n      m[k] = m2[k];\n    }\n\n    return m;\n  }\n/**\n * @template V\n * @param {?} m1\n * @param {?} m2\n * @return {?}\n */\nstatic equals<V>(m1: {[key: string]: V}, m2: {[key: string]: V}): boolean {\n    const /** @type {?} */ k1 = Object.keys(m1);\n    const /** @type {?} */ k2 = Object.keys(m2);\n\n    if (k1.length != k2.length) {\n      return false;\n    }\n\n    for (let /** @type {?} */ i = 0; i < k1.length; i++) {\n      const /** @type {?} */ key = k1[i];\n      if (m1[key] !== m2[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\nexport class ListWrapper {\n/**\n * @template T\n * @param {?} arr\n * @param {?} condition\n * @return {?}\n */\nstatic findLast<T>(arr: T[], condition: (value: T) => boolean): T {\n    for (let /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n      if (condition(arr[i])) {\n        return arr[i];\n      }\n    }\n    return null;\n  }\n/**\n * @template T\n * @param {?} list\n * @param {?} items\n * @return {?}\n */\nstatic removeAll<T>(list: T[], items: T[]) {\n    for (let /** @type {?} */ i = 0; i < items.length; ++i) {\n      const /** @type {?} */ index = list.indexOf(items[i]);\n      if (index > -1) {\n        list.splice(index, 1);\n      }\n    }\n  }\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nstatic remove<T>(list: T[], el: T): boolean {\n    const /** @type {?} */ index = list.indexOf(el);\n    if (index > -1) {\n      list.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nstatic equals(a: any[], b: any[]): boolean {\n    if (a.length != b.length) return false;\n    for (let /** @type {?} */ i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nstatic flatten<T>(list: Array<T | T[]>): T[] {\n    return list.reduce((flat: any[], item: T | T[]): T[] => {\n      const /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n      return ( /** @type {?} */((<T[]>flat))).concat(flatItem);\n    }, []);\n  }\n/**\n * @template T\n * @param {?} list\n * @param {?} callback\n * @return {?}\n */\nstatic forEach<T>(list: ArrayLike<T>, callback: (item: T, index: number) => void): void {\n    for (let /** @type {?} */ i = 0, /** @type {?} */ max = list.length; i < max; i++) {\n      callback.call(callback, list[i], i);\n    }\n  }\n}\n"],"names":["ResolvedReflectiveFactory","global"],"mappings":"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"}